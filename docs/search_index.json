[["index.html", "DoD cloud2trees Demonstration: Forest Fuel Quantification for Wildfire Modeling using QUIC-Fire Section 1 Introduction 1.1 Objective 1.2 Data", " DoD cloud2trees Demonstration: Forest Fuel Quantification for Wildfire Modeling using QUIC-Fire George Woolsey 12 July, 2025 Section 1 Introduction Demonstration of cloud2trees for processing aerial point cloud data to generate inputs for QUIC-Fire 1.1 Objective The objective of this study is to demonstrate the use of cloud2trees for processing aerial point cloud data to generate inputs for QUIC-Fire. We will use the framework to process ALS and UAS-SfM datasets across geographically variable demonstration sites. The cloud2trees framework generates a tree list containing individual tree-level attributes such as geographic coordinates (X, Y), height, DBH, crown dimensions, forest type, and wildfire-relevant fuel loading metrics like crown bulk density and crown base height. The outputs from cloud2trees will be prepared for ingestion into the QUIC-Fire model (perhaps this is built into the package by now???) to showcase the framework’s processing efficiency and reliability for timely wildfire behavior modeling. 1.2 Data ALS data was mostly obtained at the USGS LidarExplorer and UAS-SfM data was….. "],["data-preparation.html", "Section 2 Data Preparation 2.1 Study Sites 2.2 Point Cloud Data 2.3 ITD window functions 2.4 Other plotting functions", " Section 2 Data Preparation Let’s check out the data we need to process and create: 1) a processing data frame; 2) a LAS catalog (lidR package) with information on the point cloud data The priority list for processing this data is: Sycan ALS Fort Stewart ALS New Jersey ALS Salt Cabin SfM Fort Stewart UAS Lidar Sycan UAS Lidar Salt Cabin ALS I debated creating an automated pipeline to process all of the data but instead will create individual sections for each of the study sites and process them manually. This will overcome the challenge of defining unique variable window functions for use in ITD which we’ll tune using cloud2trees::itd_tuning() Load the standard libraries we use to do work # bread-and-butter library(tidyverse) # the tidyverse library(viridis) # viridis colors library(harrypotter) # hp colors library(RColorBrewer) # brewer colors library(scales) # work with number and plot scales library(latex2exp) # visualization library(mapview) # interactive html maps library(kableExtra) # tables library(patchwork) # combine plots library(ggmap) # correlation plots # spatial analysis library(terra) # raster library(sf) # simple features library(lidR) # lidar data library(rgl) # 3d plots library(cloud2trees) # the cloud2trees 2.1 Study Sites let’s check out the vector data of the study sites dir_temp &lt;- &quot;../data&quot; # what vector data? df_temp &lt;- list.files(dir_temp, pattern = &quot;.*\\\\.(shp|gpkg)$&quot;, recursive = T) %&gt;% dplyr::tibble() %&gt;% setNames(&quot;fpath&quot;) %&gt;% dplyr::filter( !str_detect(fpath, &quot;point_cloud_processing&quot;) ) %&gt;% dplyr::mutate( study_site = dirname(fpath) , fpath = file.path(dir_temp, fpath) , fdir = dirname(fpath) ) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::filter(dplyr::row_number()==1) %&gt;% dplyr::ungroup() if(nrow(df_temp)==0){stop(&quot;no vector data found&quot;)} # load in the vector data study_sites_sf &lt;- 1:nrow(df_temp) %&gt;% purrr::map(\\(x) sf::st_read( dsn = df_temp$fpath[x] ) %&gt;% # put all in the same projection sf::st_transform(crs=5070) %&gt;% dplyr::mutate(study_site = df_temp$study_site[x]) %&gt;% dplyr::select(study_site) ) %&gt;% dplyr::bind_rows() %&gt;% dplyr::inner_join(df_temp, by = &quot;study_site&quot;) ## Reading layer `Burn Unit F6_6&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\FortStewart\\Burn Unit F6_6.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 6 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 431049.1 ymin: 3543511 xmax: 434589.8 ymax: 3545826 ## Projected CRS: WGS 84 / UTM zone 17N ## Reading layer `CB_BurnBlock&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\NewJersey\\CB_BurnBlock.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 13 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 525216.5 ymin: 365372.9 xmax: 529448.3 ymax: 370453.3 ## Projected CRS: NAD83 / New Jersey (ftUS) ## Reading layer `SaltCabin_Unit2_Boundary&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\SaltCabin\\SaltCabin_Unit2_Boundary.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 4 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 453612.2 ymin: 4502029 xmax: 454053.5 ymax: 4502398 ## Projected CRS: NAD83 / UTM zone 13N ## Reading layer `Sycan_2A&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\SycanMarsh\\Sycan_2A.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 10 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 4748335 ymin: 436780.6 xmax: 4750706 ymax: 438275.2 ## Projected CRS: NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet # figure out where the point cloud data is ptcld_df_temp &lt;- 1:nrow(study_sites_sf) %&gt;% purrr::map(function(x){ # look for dirs with las/laz dirs &lt;- study_sites_sf$fdir[x] %&gt;% list.files(pattern = &quot;.*\\\\.(laz|las)$&quot;, recursive = T, full.names = T) %&gt;% dirname() %&gt;% tolower() %&gt;% unique() %&gt;% purrr::keep( ~ !str_detect(.x, &quot;point_cloud_processing&quot;) ) # gen df df &lt;- dplyr::tibble( als_dir = character(1) , uas_lidar_dir = character(1) , uas_sfm_dir = character(1) ) %&gt;% dplyr::mutate( als_dir = purrr::keep(dirs, ~ str_detect(.x, &quot;als&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , uas_lidar_dir = purrr::keep(dirs, ~ str_detect(.x, &quot;uas&quot;) &amp; str_detect(.x, &quot;lidar&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , uas_sfm_dir = purrr::keep(dirs, ~ str_detect(.x, &quot;uas&quot;) &amp; str_detect(.x, &quot;sfm&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , fdir = study_sites_sf$fdir[x] ) return(df) }) %&gt;% dplyr::bind_rows() # add ptcld dirs to data study_sites_sf &lt;- study_sites_sf %&gt;% dplyr::left_join(ptcld_df_temp, by = &quot;fdir&quot;) # what? study_sites_sf %&gt;% dplyr::glimpse() ## Rows: 4 ## Columns: 7 ## $ study_site &lt;chr&gt; &quot;FortStewart&quot;, &quot;NewJersey&quot;, &quot;SaltCabin&quot;, &quot;SycanMarsh&quot; ## $ fpath &lt;chr&gt; &quot;../data/FortStewart/Burn Unit F6_6.shp&quot;, &quot;../data/NewJe… ## $ fdir &lt;chr&gt; &quot;../data/FortStewart&quot;, &quot;../data/NewJersey&quot;, &quot;../data/Sal… ## $ als_dir &lt;chr&gt; &quot;../data/fortstewart/als_2018_laz_files&quot;, &quot;../data/newje… ## $ uas_lidar_dir &lt;chr&gt; &quot;../data/fortstewart/not_actually_uas_lidar_but_data_use… ## $ uas_sfm_dir &lt;chr&gt; NA, NA, &quot;../data/saltcabin/uas_sfm&quot;, NA ## $ geometry &lt;POLYGON [m]&gt; POLYGON ((1336943 1097560, ..., POLYGON ((1817860 207637… where are these places? # first plot a point so we can see it on the map mapview::mapview( sf::st_centroid(study_sites_sf) , zcol = &quot;study_site&quot; , cex = 5 , label = T , legend = T , popup = T , layer.name = &quot;study areas&quot; ) + # add the study bounds mapview::mapview( study_sites_sf , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , label = F , legend = F , popup = F ) let’s create a pretty name for each site study_sites_sf &lt;- study_sites_sf %&gt;% dplyr::mutate( study_site_lab = dplyr::case_match( tolower(study_site) , &quot;fortstewart&quot; ~ &quot;Fort Stewart (GA)&quot; , &quot;newjersey&quot; ~ &quot;Cedar Bridge (NJ)&quot; , &quot;saltcabin&quot; ~ &quot;Salt Cabin (CO)&quot; , &quot;sycanmarsh&quot; ~ &quot;Sycan Marsh (OR)&quot; ) %&gt;% dplyr::coalesce(study_site) ) 2.2 Point Cloud Data Let’s check out the point cloud data we got las_df_temp &lt;- study_sites_sf %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site, tidyselect::ends_with(&quot;_dir&quot;)) %&gt;% tidyr::pivot_longer( cols = -c(study_site) , values_drop_na = T ) %&gt;% dplyr::mutate( name = stringr::str_remove_all(name, &quot;_dir&quot;) , als_nm = stringr::str_extract(value,&quot;als_(\\\\d{4})&quot;) , nm = stringr::str_c( study_site , dplyr::coalesce(als_nm, name) , sep = &quot;_&quot; ) ) # directory with the downloaded .las|.laz files study_sites_las_ctg &lt;- 1:nrow(las_df_temp) %&gt;% purrr::map(\\(x) lidR::readLAScatalog(las_df_temp$value[x]) ) names(study_sites_las_ctg) &lt;- las_df_temp$nm # what are these ctgs? study_sites_las_ctg ## $FortStewart_als_2018 ## class : LAScatalog (v1.4 format 6) ## extent : 1336000, 1340000, 1095000, 1098000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / Conus Albers + NAVD88 height - Geoid12B (Meters) ## area : 9 km² ## points : 43.07 million points ## type : airborne ## density : 4.8 points/m² ## density : 3.1 pulses/m² ## num. files : 9 ## ## $FortStewart_als_2025 ## class : LAScatalog (v1.4 format 6) ## extent : 430500, 434700, 3543200, 3546000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / NAD83(2011) / UTM zone 17N + NAVD88 ## area : 6.86 km² ## points : 340.22 million points ## type : airborne ## density : 49.6 points/m² ## density : 27.8 pulses/m² ## num. files : 14 ## ## $NewJersey_als ## class : LAScatalog (v1.2 format 1) ## extent : 552848.7, 554163.1, 4409783, 4411353 (xmin, xmax, ymin, ymax) ## coord. ref. : NA ## area : 6.19 kunits² ## points : 80.3 million points ## type : airborne ## density : 13 points/units² ## num. files : 3 ## ## $SaltCabin_als_2021 ## class : LAScatalog (v1.4 format 0) ## extent : -801159, -797999, 2001522, 2003352 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / Conus Albers ## area : 5.6 km² ## points : 35.22 million points ## type : airborne ## density : 6.3 points/m² ## density : 6.3 pulses/m² ## num. files : 2 ## ## $SaltCabin_uas_sfm ## class : LAScatalog (v1.2 format 3) ## extent : 453536.8, 454139, 4501977, 4502440 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 13N ## area : 278704 m² ## points : 94.51 million points ## type : terrestrial ## density : 339.1 points/m² ## num. files : 1 ## ## $SycanMarsh_als_2021 ## class : LAScatalog (v1.4 format 6) ## extent : 651000, 653000, 4747000, 4748000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / UTM zone 10N + NAVD88 height - Geoid18 (m) ## area : 2 km² ## points : 68.02 million points ## type : airborne ## density : 34 points/m² ## density : 25.6 pulses/m² ## num. files : 2 ## ## $SycanMarsh_uas_lidar ## class : LAScatalog (v1.2 format 3) ## extent : 651487, 652298.4, 4747227, 4747880 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 10N ## area : 0.53 km² ## points : 200.55 million points ## type : terrestrial ## density : 378.3 points/m² ## density : 350.8 pulses/m² ## num. files : 1 plot the point cloud catalog with the stand boundary ggplot2::ggplot() + ggplot2::geom_sf( data = study_sites_sf %&gt;% dplyr::slice(1) , color = &quot;navy&quot;, fill = NA ) + ggplot2::geom_sf( data = study_sites_las_ctg[[1]]$geometry %&gt;% sf::st_transform(sf::st_crs(study_sites_sf)) , color = &quot;gray33&quot;, fill = NA ) + ggplot2::theme_light() # lidR::st_crs(ctg_temp[[3]]) let’s make a quick function to grab a background map (e.g. like a Google Map) for an AOI using the ggmap package library(ggmap) library(ggspatial) ######################################################################### ######################################################################### # Make each plot individually by landscape as solution to small multiples # this block defines function ######################################################################### ##################hack to align plots for ggmap ggmap_bbox_fn &lt;- function(map, my_crs=3857) { if (!inherits(map, &quot;ggmap&quot;)) stop(&quot;map must be a ggmap object&quot;) # Extract the bounding box (in lat/lon) from the ggmap to a numeric vector, # and set the names to what sf::st_bbox expects: map_bbox &lt;- setNames(unlist(attr(map, &quot;bb&quot;)), c(&quot;ymin&quot;, &quot;xmin&quot;, &quot;ymax&quot;, &quot;xmax&quot;)) # Convert the bbox to an sf polygon, transform it to 3857, # and convert back to a bbox (convoluted, but it works) bbox_3857 &lt;- st_bbox(st_transform(st_as_sfc(st_bbox(map_bbox, crs = 4326)), my_crs)) # Overwrite the bbox of the ggmap object with the transformed coordinates attr(map, &quot;bb&quot;)$ll.lat &lt;- bbox_3857[&quot;ymin&quot;] attr(map, &quot;bb&quot;)$ll.lon &lt;- bbox_3857[&quot;xmin&quot;] attr(map, &quot;bb&quot;)$ur.lat &lt;- bbox_3857[&quot;ymax&quot;] attr(map, &quot;bb&quot;)$ur.lon &lt;- bbox_3857[&quot;xmax&quot;] map } plt_crs &lt;- 3857 ######################################################################### ######################################################################### # for google maps... have to: # 1) get api key at https://console.cloud.google.com/apis/dashboard # 2) run ggmap::register_google(key = &quot;mykey_xxxxxxxxx&quot;, write = T) ######################################################################### my_ggmap_basemap &lt;- function( sf_data , zoom_level = 14 # from 3 (continent) to 21 (building), default value 10 (city) , buffer_box = 2600 , my_crs = plt_crs , scale_location = &quot;bl&quot; , my_maptype = &quot;stamen_terrain&quot; ## stamen # stamen_terrain, stamen_toner, stamen_toner_lite, stamen_watercolor, stamen_terrain_background # , stamen_toner_background, stamen_terrain_lines, stamen_terrain_labels # , stamen_toner_lines, stamen_toner_labels ## googlmap # &quot;terrain&quot;, &quot;satellite&quot;, &quot;roadmap&quot;, and &quot;hybrid&quot; , add_sf_data = F , outline_sf_data_col = &quot;white&quot; , outline_lwd = 0.7 ) { # # should zoom in? # zoom_level &lt;- 14 # 11 # # should buffer extend? # buffer_box &lt;- 2600 # 20000 # bounding box bb_temp &lt;- sf_data %&gt;% sf::st_bbox() %&gt;% sf::st_as_sfc() %&gt;% sf::st_transform(crs=5070) %&gt;% sf::st_buffer(as.numeric(buffer_box)) %&gt;% sf::st_transform(crs=4326) center_temp &lt;- sf::st_centroid(bb_temp) %&gt;% sf::st_coordinates() %&gt;% .[1,] # set bbox for get call bb_temp &lt;- sf::st_bbox(bb_temp) bbox_temp &lt;- c( bottom = bb_temp[[2]] , top = bb_temp[[4]] , right = bb_temp[[3]] , left = bb_temp[[1]] ) # ggmap::get_stadiamap vs ggmap::get_googlemap if( tolower(my_maptype) %in% c(&quot;terrain&quot;, &quot;satellite&quot;, &quot;roadmap&quot;, &quot;hybrid&quot;) ){ is_google &lt;- T hey_ggmap &lt;- ggmap::get_googlemap( center = center_temp , zoom = zoom_level , maptype = tolower(my_maptype) , crop = T ) }else{ is_google &lt;- F hey_ggmap &lt;- ggmap::get_stadiamap( bbox = bbox_temp , zoom = zoom_level , maptype = tolower(my_maptype) #&quot;stamen_terrain&quot; #&quot;stamen_toner_lite&quot; , crop = T ) # ggmap::ggmap(hey_ggmap) # apply align function hey_ggmap &lt;- ggmap_bbox_fn(hey_ggmap, my_crs) # Use the function } # plot plt_basemap &lt;- ggmap::ggmap(hey_ggmap) + ggplot2::coord_sf( expand = FALSE ) + ggplot2::theme_light() + ggplot2::theme( legend.position = &quot;none&quot; , plot.title = ggplot2::element_blank() , strip.text = ggplot2::element_blank() , axis.title = ggplot2::element_blank() , axis.text = ggplot2::element_blank() , axis.ticks = ggplot2::element_blank() , panel.grid = ggplot2::element_blank() , plot.margin = ggplot2::margin(0, 0, 0, 0, &quot;cm&quot;) ) ### add data? if(scale_location %in% c(&quot;bl&quot;, &quot;br&quot;, &quot;tr&quot;, &quot;tl&quot;)){ plt_basemap &lt;- plt_basemap + ggspatial::annotation_scale( location = scale_location , style = &quot;ticks&quot; , pad_x = unit(0.1, &quot;cm&quot;) , pad_y = unit(0.1, &quot;cm&quot;) ) } if(add_sf_data){ if(is_google){ plt_basemap &lt;- plt_basemap + ggplot2::geom_sf( data = sf_data %&gt;% sf::st_transform(4326) , fill = NA, color = outline_sf_data_col, lwd = outline_lwd , inherit.aes = F ) # ggplot2::geom_path( # data = sf_data %&gt;% # sf::st_transform(4326) %&gt;% # st_coordinates() %&gt;% # as.data.frame() %&gt;% # dplyr::mutate(lon = X, lat = Y) %&gt;% # sf::st_as_sf(coords = c(&quot;X&quot;,&quot;Y&quot;), crs = 4326) # , fill = NA, color = outline_sf_data_col # , inherit.aes = F # ) }else{ plt_basemap &lt;- plt_basemap + ggplot2::geom_sf( data = sf_data %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, color = outline_sf_data_col, lwd = outline_lwd , inherit.aes = F ) } } return(plt_basemap) } make a function specific to this data and task to grab the basemap with my_ggmap_basemap() and overlay the point cloud data and the study area bounds plt_fn_temp &lt;- function( record_study_sites_las_ctg , my_study_sites_las_ctg = study_sites_las_ctg , my_study_sites_sf = study_sites_sf # , zoom_level = 14, buffer_box = 2600, my_crs = plt_crs, scale_location = &quot;bl&quot;, my_maptype = &quot;stamen_terrain&quot; ) { # make a function to grab the basemap with my_ggmap_basemap, and overlay the point cloud data and the study area bounds plt_basemap_temp &lt;- my_ggmap_basemap( sf_data = my_study_sites_las_ctg[[record_study_sites_las_ctg]]$geometry , zoom_level = 14 , buffer_box = 3333 , my_crs = plt_crs , scale_location = &quot;bl&quot; , my_maptype = &quot;stamen_terrain&quot; ) # plot plt2_temp &lt;- plt_basemap_temp + ggplot2::geom_sf( data = my_study_sites_las_ctg[[record_study_sites_las_ctg]]$geometry %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, lwd = 0.7, color = &quot;gray8&quot; , inherit.aes = F ) + ggplot2::geom_sf( data = my_study_sites_sf %&gt;% dplyr::filter( study_site %in% (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::word(sep = &quot;_&quot;)) ) %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, color = &quot;navy&quot;, lwd = 1.4 , inherit.aes = F ) + ggplot2::labs( subtitle = paste0( my_study_sites_sf %&gt;% dplyr::filter( study_site %in% (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::word(sep = &quot;_&quot;)) ) %&gt;% dplyr::pull(study_site_lab) , &quot; - &quot; , (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::str_replace_all(&quot;_&quot;,&quot; &quot;) %&gt;% stringr::str_replace(&quot;^\\\\S+\\\\s*&quot;, &quot;&quot;) %&gt;% toupper() ) , &quot; data&quot; ) ) return( plt2_temp ) } # for each las ctg with crs plts_temp &lt;- 1:length(study_sites_las_ctg %&gt;% purrr::discard(names(.) %in% c(&quot;FortStewart_uas_lidar&quot;,&quot;NewJersey_als&quot;))) %&gt;% purrr::map( \\(x) plt_fn_temp( record_study_sites_las_ctg = x , my_study_sites_las_ctg = study_sites_las_ctg %&gt;% purrr::discard(names(.) %in% c(&quot;FortStewart_uas_lidar&quot;,&quot;NewJersey_als&quot;)) , ) ) # patchwork it patchwork::wrap_plots(plts_temp, ncol = 2) # 2.3 ITD window functions # set up initial list with default functions my_ws_functions &lt;- cloud2trees::itd_ws_functions() # add to list my_ws_functions$log_les_ccv_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; exp(5)-1 ~ 5 , TRUE ~ log(x+1) ) return(y) } # add to list my_ws_functions$log_mor_ccv_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; exp(7/1.5)-1 ~ 7 , TRUE ~ 1.5*log(x+1) ) return(y) } # add to list my_ws_functions$lin_lo_slp_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; (4-0.75)/0.04 ~ 4 , TRUE ~ 0.75 + (x * 0.04) ) return(y) } run each function over a range of heights to see what they return on a plot # get ws by ht for each fn ws_fn_df &lt;- 1:length(my_ws_functions) %&gt;% purrr::map(function(x){ nm &lt;- my_ws_functions[x] %&gt;% names() %&gt;% as.character() fn &lt;- my_ws_functions[[x]] # est height &lt;- seq(from=0,to=60,by=0.5) ws &lt;- fn(height) %&gt;% unlist() df &lt;- dplyr::tibble( height = height , ws = ws ) %&gt;% dplyr::mutate(ws_fn_nm = nm) %&gt;% dplyr::relocate(ws_fn_nm) return(df) }) %&gt;% dplyr::bind_rows() # huh? ws_fn_df %&gt;% dplyr::glimpse() ## Rows: 726 ## Columns: 3 ## $ ws_fn_nm &lt;chr&gt; &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;… ## $ height &lt;dbl&gt; 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6… ## $ ws &lt;dbl&gt; 1.00, 1.00, 1.00, 1.00, 1.03, 1.10, 1.17, 1.24, 1.31, 1.38, 1… plot of all ITD variable window functions for testing ws_fn_df %&gt;% ggplot2::ggplot(mapping = ggplot2::aes(x = height, y = ws, color = ws_fn_nm)) + ggplot2::geom_line(lwd=1) + # ggplot2::scale_color_manual(values = pal_ws) + # ggplot2::scale_color_viridis_d(option = &quot;turbo&quot;) + ggplot2::scale_color_brewer(palette = &quot;Dark2&quot;) + ggplot2::xlim(-3,NA) + ggplot2::ylim(-0.1,NA) + ggplot2::labs( x = &quot;heights&quot;, y = &quot;ws&quot; , color = &quot;variable\\nwindow\\nfunction&quot; , subtitle = &quot;ITD variable window functions for testing&quot; ) + ggplot2::theme_light() + ggplot2::guides( color = ggplot2::guide_legend(override.aes = list(lwd = 6)) ) 2.4 Other plotting functions function to plot raster with vector data overlaid plt_rast_poly_fn &lt;- function( rast , poly , crop = T , mask = F , buff = 22 , col = &quot;red&quot; , lwd = 1 , title = &quot;&quot; , leg_pos = &quot;top&quot; ) { if(crop){ rast &lt;- rast %&gt;% terra::crop( poly %&gt;% sf::st_buffer(buff) %&gt;% sf::st_transform(terra::crs(rast)) %&gt;% terra::vect() ) } if(mask){ rast &lt;- rast %&gt;% terra::mask( poly %&gt;% sf::st_buffer(buff) %&gt;% sf::st_transform(terra::crs(rast)) %&gt;% terra::vect() ) } # Convert SpatRaster to a data frame for ggplot rast_df &lt;- terra::as.data.frame(rast, xy=TRUE) %&gt;% rename(f=3) # Create the base raster plot p &lt;- ggplot2::ggplot() + ggplot2::geom_raster( data = rast_df, aes(x = x, y = y, fill = f) ) + # ggplot2::scale_fill_viridis_c() + # Use a colorblind-friendly palette # ggplot2::coord_sf(crs = terra::crs(rast)) + # Match the CRS ggplot2::labs(fill = &quot;&quot;) + ggplot2::theme_void() + ggplot2::theme( legend.position = leg_pos , legend.text = ggplot2::element_text(angle = 90, vjust = 0.5, size = 7) , plot.subtitle = ggplot2::element_text(hjust = 0.5) # , plot.title = ggplot2::element_text(hjust = 0.5) ) # Add the polygon overlay p &lt;- p + ggplot2::geom_sf( data = poly %&gt;% sf::st_transform(terra::crs(rast)) , fill = NA, color = col, lwd = lwd ) + ggplot2::labs(subtitle = title) return(p) } ##### plt_crown_attr_fn &lt;- function( crowns , aoi , col = &quot;navy&quot; , lwd = 1 , title = &quot;&quot; , leg_pos = &quot;top&quot; # polygon attrs , fill_var , palette = &quot;Blues&quot; # see ggplot2::scale_fill_distiller ) { ggplot2::ggplot( data = aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) + ggplot2::geom_sf(fill = NA, color = col, lwd = lwd) + ggplot2::geom_sf( data = crowns %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) , mapping = ggplot2::aes(fill = .data[[fill_var]]) , color = NA ) + ggplot2::scale_fill_distiller(palette = palette, name = title, direction = 1, labels = scales::comma_format(accuracy = 1)) + ggplot2::theme_void() + ggplot2::theme( legend.position = leg_pos , legend.direction = &quot;horizontal&quot; , legend.title = ggplot2::element_text(size = 7) , legend.text = ggplot2::element_text(size = 6) ) } # load our FIA forest type group raster for use later # load lookup foresttype_lookup &lt;- file.path(cloud2trees::find_ext_data()[[&quot;foresttype_dir&quot;]], &quot;foresttype_lookup.csv&quot;) %&gt;% readr::read_csv(progress = F, show_col_types = F) %&gt;% dplyr::distinct(forest_type_group_code, forest_type_group, hardwood_softwood) %&gt;% dplyr::mutate(forest_type_group = stringr::str_remove(forest_type_group, &quot; group&quot;)) # forest type group summary foresttype_sum_fn &lt;- function(crowns, aoi, unit) { crowns %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate(unit_name = unit) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::count(unit_name, forest_type_group) %&gt;% dplyr::arrange(unit_name, desc(n)) %&gt;% dplyr::group_by(unit_name) %&gt;% dplyr::mutate( pct = scales::percent(n/sum(n), accuracy = 0.1) ) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate(n = scales::comma(n,accuracy=1)) %&gt;% kableExtra::kbl( caption = &quot;Count of trees by FIA Forest Type Group&quot; , digits = 2 , col.names = c( &quot;.&quot; , &quot;&quot; , &quot;# trees&quot; , &quot;% trees&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::collapse_rows(columns = 1, valign = &quot;top&quot;) } # summarize tree metrics stats_sum_fn &lt;- function(crowns, aoi, unit) { crowns %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate(unit_name = unit) %&gt;% dplyr::group_by( unit_name) %&gt;% dplyr::summarise( dplyr::across( c(tree_height_m, dbh_cm, tree_cbh_m, max_crown_diam_height_m, cruz_tree_kg_per_m3, landfire_tree_kg_per_m3) , .fns = list(mean = mean, median = median, sd = sd, min = min, max = max) ) , n = dplyr::n() ) %&gt;% dplyr::ungroup() %&gt;% tidyr::pivot_longer(cols = -c( unit_name,n)) %&gt;% dplyr::mutate( agg = stringr::word(name,-1,sep = &quot;_&quot;) , metric = stringr::str_remove_all(name, paste0(&quot;_&quot;,agg)) ) %&gt;% dplyr::select(-name) %&gt;% dplyr::mutate( value = dplyr::case_when( metric == &quot;tree_height_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;dbh_cm&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;tree_cbh_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;max_crown_diam_height_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;cruz_tree_kg_per_m3&quot; ~ scales::comma(value,accuracy=0.001) , metric == &quot;landfire_tree_kg_per_m3&quot; ~ scales::comma(value,accuracy=0.001) , T ~ scales::comma(value,accuracy=0.1) ) ) %&gt;% tidyr::pivot_wider(names_from = agg, values_from = value) %&gt;% dplyr::mutate( unit_lab = paste0( unit_name ,&quot;&lt;br&gt;(&quot; , scales::comma(n,accuracy=1) ,&quot; trees)&quot; ) , range = paste0(min, &quot;—&quot;, max) ) %&gt;% dplyr::arrange( unit_name, desc(n)) %&gt;% dplyr::select(-c(unit_name,n,min,max)) %&gt;% dplyr::relocate(unit_lab) %&gt;% dplyr::mutate( metric = factor( metric , ordered = T , levels = c( &quot;tree_height_m&quot; , &quot;dbh_cm&quot; , &quot;tree_cbh_m&quot; , &quot;max_crown_diam_height_m&quot; , &quot;cruz_tree_kg_per_m3&quot; , &quot;landfire_tree_kg_per_m3&quot; ) , labels = c( &quot;Height (m)&quot; , &quot;DBH (cm)&quot; , &quot;Crown Base Ht. (m)&quot; , &quot;HMD (m)&quot; , &quot;Cruz CBD&lt;br&gt;kg m&lt;sup&gt;-3&lt;/sup&gt;&quot; , &quot;LANDFIRE CBD&lt;br&gt;kg m&lt;sup&gt;-3&lt;/sup&gt;&quot; ) ) ) %&gt;% kableExtra::kbl( caption = &quot;Summary statistics for selected metrics&quot; , col.names = c( &quot;Unit Name&quot;, &quot;Metric&quot; , &quot;Mean&quot;, &quot;Median&quot; , &quot;Std Dev&quot;, &quot;Range&quot; ) , escape = F # , digits = 2 ) %&gt;% kableExtra::kable_styling(font_size = 13) %&gt;% kableExtra::collapse_rows(columns = 1, valign = &quot;top&quot;) } "],["sycan-marsh-or.html", "Section 3 Sycan Marsh (OR) 3.1 ALS Processing 3.2 UAS lidar Processing", " Section 3 Sycan Marsh (OR) process the point cloud data for the Sycan Marsh (OR) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;SycanMarsh&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[1]]$geometry , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $SycanMarsh_als_2021 ## class : LAScatalog (v1.4 format 6) ## extent : 651000, 653000, 4747000, 4748000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / UTM zone 10N + NAVD88 height - Geoid18 (m) ## area : 2 km² ## points : 68.02 million points ## type : airborne ## density : 34 points/m² ## density : 25.6 pulses/m² ## num. files : 2 ## ## $SycanMarsh_uas_lidar ## class : LAScatalog (v1.2 format 3) ## extent : 651487, 652298.4, 4747227, 4747880 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 10N ## area : 0.53 km² ## points : 200.55 million points ## type : terrestrial ## density : 378.3 points/m² ## density : 350.8 pulses/m² ## num. files : 1 3.1 ALS Processing 3.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SycanMarsh_als_2021&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SycanMarsh_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 2 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SycanMarsh_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 6, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 3.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2021_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 3.1.3 cloud2trees Results 3.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 3.1: Count of trees by FIA Forest Type Group . # trees % trees Sycan Marsh (OR) Ponderosa pine group 4,291 100.0% 3.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 3.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 3.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 3.1.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 3.1.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) Table 3.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Sycan Marsh (OR) - ALS(4,291 trees) Height (m) 12.7 12.8 6.0 2.0—33.8 DBH (cm) 24.3 23.1 13.7 3.6—79.0 Crown Base Ht. (m) 3.8 3.8 1.1 1.5—15.5 HMD (m) 5.3 5.5 1.8 0.0—18.5 Cruz CBDkg m-3 0.421 0.414 0.116 0.107—1.253 LANDFIRE CBDkg m-3 0.216 0.200 0.130 0.057—1.953 3.2 UAS lidar Processing 3.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SycanMarsh_uas_lidar&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SycanMarsh_uas_lidar.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 2 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SycanMarsh_uas_lidar.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 6, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$lin_fn 3.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;uas_lidar_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 3.2.3 cloud2trees Results 3.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 3.3: Count of trees by FIA Forest Type Group . # trees % trees Sycan Marsh (OR) Ponderosa pine group 4,473 100.0% 3.2.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 3.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 3.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 3.2.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 3.2.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) Table 3.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Sycan Marsh (OR) - UAS Lidar(4,473 trees) Height (m) 11.5 11.3 6.9 2.0—34.2 DBH (cm) 22.4 19.9 15.7 3.6—82.0 Crown Base Ht. (m) 4.1 4.0 1.6 1.5—14.5 HMD (m) 4.8 4.7 2.7 0.1—16.6 Cruz CBDkg m-3 0.299 0.289 0.099 0.090—1.852 LANDFIRE CBDkg m-3 0.147 0.134 0.075 0.052—1.188 "],["fort-stewart-ga.html", "Section 4 Fort Stewart (GA) 4.1 ALS (2018) Processing 4.2 ALS (2025) Processing", " Section 4 Fort Stewart (GA) process the point cloud data for the Fort Stewart (GA) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;FortStewart&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[1]]$geometry , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $FortStewart_als_2018 ## class : LAScatalog (v1.4 format 6) ## extent : 1336000, 1340000, 1095000, 1098000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / Conus Albers + NAVD88 height - Geoid12B (Meters) ## area : 9 km² ## points : 43.07 million points ## type : airborne ## density : 4.8 points/m² ## density : 3.1 pulses/m² ## num. files : 9 ## ## $FortStewart_als_2025 ## class : LAScatalog (v1.4 format 6) ## extent : 430500, 434700, 3543200, 3546000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / NAD83(2011) / UTM zone 17N + NAVD88 ## area : 6.86 km² ## points : 340.22 million points ## type : airborne ## density : 49.6 points/m² ## density : 27.8 pulses/m² ## num. files : 14 4.1 ALS (2018) Processing 4.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;FortStewart_als_2018&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_FortStewart_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.3 ) ggplot2::ggsave( &quot;../data/itd_tuning_FortStewart_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 4.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2018_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.3 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.3m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 4.1.3 cloud2trees Results 4.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 4.1: Count of trees by FIA Forest Type Group . # trees % trees Fort Stewart (GA) Loblolly / shortleaf pine group 95,880 62.7% Longleaf / slash pine group 30,686 20.1% Oak / gum / cypress group 26,376 17.2% Oak / pine group 43 0.0% 4.1.3.2 DTM this is a large area so we’re going to make the raster more coarse plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) this is lowland 4.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.1) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.1 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) 4.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf %&gt;% sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) , zoom_level = 17 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = F ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 4.1.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.2) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 4.1.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;) ) Table 4.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Fort Stewart (GA) - ALS 2018(152,985 trees) Height (m) 17.5 18.7 6.2 2.0—38.4 DBH (cm) 22.1 23.0 8.9 3.4—67.6 Crown Base Ht. (m) 11.4 12.4 3.6 1.5—25.5 HMD (m) 9.8 10.6 3.6 0.1—27.1 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.235 0.251 0.119 0.005—1.278 4.2 ALS (2025) Processing 4.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;FortStewart_als_2025&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/FortStewart_als_2025.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.25 ) ggplot2::ggsave( &quot;../data/FortStewart_als_2025.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 4.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2025_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 4.2.3 cloud2trees Results 4.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 4.3: Count of trees by FIA Forest Type Group . # trees % trees Fort Stewart (GA) Loblolly / shortleaf pine group 44,680 60.2% Oak / gum / cypress group 17,110 23.0% Longleaf / slash pine group 12,458 16.8% Oak / pine group 15 0.0% 4.2.3.2 DTM this is a large area so we’re going to make the raster more coarse plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) this is lowland 4.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.2) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.1 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) 4.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf %&gt;% sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) , zoom_level = 17 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = F ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 4.2.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.4) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 4.2.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;) ) Table 4.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Fort Stewart (GA) - ALS 2025(74,263 trees) Height (m) 19.0 20.5 6.5 2.0—36.9 DBH (cm) 24.9 26.3 9.7 3.4—64.0 Crown Base Ht. (m) 9.4 10.0 3.0 1.5—24.5 HMD (m) 10.2 10.8 4.1 0.1—27.8 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.358 0.336 0.224 0.009—1.931 "],["salt-cabin-co.html", "Section 5 Salt Cabin (CO) 5.1 ALS Processing 5.2 UAS sfm Processing", " Section 5 Salt Cabin (CO) process the point cloud data for the Salt Cabin (CO) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;SaltCabin&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[1]]$geometry , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $SaltCabin_als_2021 ## class : LAScatalog (v1.4 format 0) ## extent : -801159, -797999, 2001522, 2003352 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / Conus Albers ## area : 5.6 km² ## points : 35.22 million points ## type : airborne ## density : 6.3 points/m² ## density : 6.3 pulses/m² ## num. files : 2 ## ## $SaltCabin_uas_sfm ## class : LAScatalog (v1.2 format 3) ## extent : 453536.8, 454139, 4501977, 4502440 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 13N ## area : 278704 m² ## points : 94.51 million points ## type : terrestrial ## density : 339.1 points/m² ## num. files : 1 5.1 ALS Processing 5.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SaltCabin_als_2021&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SaltCabin_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SaltCabin_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 6, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 5.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2021_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 5.1.3 cloud2trees Results 5.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 5.1: Count of trees by FIA Forest Type Group . # trees % trees Salt Cabin (CO) Ponderosa pine group 5,598 76.5% Aspen / birch group 1,212 16.6% Pinyon / juniper group 194 2.7% Douglas-fir group 157 2.1% Woodland hardwoods group 87 1.2% Fir / spruce / mountain hemlock group 35 0.5% Lodgepole pine group 35 0.5% 5.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 5.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 5.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 5.1.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 5.1.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) Table 5.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Salt Cabin (CO) - ALS(7,318 trees) Height (m) 7.7 6.7 4.5 2.0—21.6 DBH (cm) 12.5 10.1 7.7 3.6—40.5 Crown Base Ht. (m) 3.4 3.5 0.8 1.5—8.5 HMD (m) 3.3 3.4 1.0 0.2—10.7 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.095 0.088 0.072 0.009—1.458 5.2 UAS sfm Processing 5.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SaltCabin_uas_sfm&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SaltCabin_uas_sfm.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SaltCabin_uas_sfm.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 5.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;uas_sfm_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 5.2.3 cloud2trees Results 5.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 5.3: Count of trees by FIA Forest Type Group . # trees % trees Salt Cabin (CO) Ponderosa pine group 2,756 76.0% Aspen / birch group 633 17.5% Pinyon / juniper group 81 2.2% Douglas-fir group 71 2.0% Woodland hardwoods group 41 1.1% Lodgepole pine group 25 0.7% Fir / spruce / mountain hemlock group 17 0.5% 5.2.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) 5.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) 5.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 5.2.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 5.2.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) Table 5.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Salt Cabin (CO) - UAS SfM(3,624 trees) Height (m) 9.2 8.4 4.9 2.0—22.5 DBH (cm) 16.4 13.6 10.0 3.7—48.9 Crown Base Ht. (m) 4.3 4.3 1.6 1.5—12.5 HMD (m) 3.8 3.6 1.9 0.1—14.7 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.114 0.108 0.081 0.016—1.307 "],["cedar-bridge-nj.html", "Section 6 Cedar Bridge (NJ) 6.1 ALS Processing", " Section 6 Cedar Bridge (NJ) process the point cloud data for the Cedar Bridge (NJ) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;NewJersey&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( sf::st_set_crs(aoi_las_ctg[[1]]$geometry, value = 32618) , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $NewJersey_als ## class : LAScatalog (v1.2 format 1) ## extent : 552848.7, 554163.1, 4409783, 4411353 (xmin, xmax, ymin, ymax) ## coord. ref. : NA ## area : 6.19 kunits² ## points : 80.3 million points ## type : airborne ## density : 13 points/units² ## num. files : 3 6.1 ALS Processing 6.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;NewJersey_als&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_NewJersey_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_NewJersey_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_fn 6.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp ## !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! This data has a missing CRS ;[ ## !!!!! setting new_crs to the epsg code of the crs i was told ## !!!!! The EPSG code for UTM zone 18N in the World Geodetic System of 1984 (WGS 84) is 32618 , new_crs = 32618 , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 6.1.3 cloud2trees Results 6.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 6.1: Count of trees by FIA Forest Type Group . # trees % trees Cedar Bridge (NJ) Loblolly / shortleaf pine group 101,982 99.3% Oak / hickory group 389 0.4% Oak / pine group 344 0.3% 6.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 6.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.3) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 6.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 6.1.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.5) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 6.1.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) ) Table 6.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Cedar Bridge (NJ) - ALS(102,715 trees) Height (m) 7.7 7.9 4.1 2.0—33.2 DBH (cm) 13.3 12.8 7.9 3.7—81.7 Crown Base Ht. (m) 3.4 3.5 1.0 1.5—11.5 HMD (m) 3.6 3.8 1.3 0.0—14.4 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.195 0.185 0.085 0.006—1.850 "],["processing-time-analysis.html", "Section 7 Processing Time Analysis", " Section 7 Processing Time Analysis let’s look into the processing time comparison across data sets the cloud2trees::cloud2trees() program automatically tracks processing time for all sections and stores the tracking data in the “point_cloud_processing_delivery” directory in a file called “processed_tracking_data.csv” dir_temp &lt;- &quot;../data&quot; # what vector data? # df_temp &lt;- list.files( dir_temp , pattern = &quot;processed_tracking_data.csv&quot; , recursive = T ) %&gt;% dplyr::tibble() %&gt;% setNames(&quot;fpath&quot;) %&gt;% dplyr::mutate( study_site = stringr::word(fpath, sep = &quot;/&quot;) , fpath = file.path(dir_temp, fpath) , fdir = dirname(fpath) ) ## # A tibble: 7 × 3 ## fpath study_site fdir ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ../data/FortStewart/als_2018_processing/point_cloud_processi… FortStewa… ../d… ## 2 ../data/FortStewart/als_2025_processing/point_cloud_processi… FortStewa… ../d… ## 3 ../data/NewJersey/als_processing/point_cloud_processing_deli… NewJersey ../d… ## 4 ../data/SaltCabin/als_2021_processing/point_cloud_processing… SaltCabin ../d… ## 5 ../data/SaltCabin/uas_sfm_processing/point_cloud_processing_… SaltCabin ../d… ## 6 ../data/SycanMarsh/als_2021_processing/point_cloud_processin… SycanMarsh ../d… ## 7 ../data/SycanMarsh/uas_lidar_processing/point_cloud_processi… SycanMarsh ../d… "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
