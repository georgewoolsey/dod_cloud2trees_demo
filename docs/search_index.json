[["index.html", "DoD cloud2trees Demonstration: Forest Fuel Quantification for Wildfire Modeling using QUIC-Fire Section 1 Introduction 1.1 Objective 1.2 Data 1.3 Processing Workflow", " DoD cloud2trees Demonstration: Forest Fuel Quantification for Wildfire Modeling using QUIC-Fire George Woolsey, Wade Tinkham, Chad Hoffman, and Sophie Bonner 22 July, 2025 Section 1 Introduction Demonstration of cloud2trees for processing aerial point cloud data to generate inputs for QUIC-Fire 1.1 Objective The objective of this study is to demonstrate the use of cloud2trees for processing aerial point cloud data to generate inputs for QUIC-Fire. We will use the framework to process ALS and UAS-SfM datasets across geographically variable demonstration sites. The cloud2trees framework generates a tree list containing individual tree-level attributes such as geographic coordinates (X, Y), height, DBH, crown dimensions, forest type, and wildfire-relevant fuel loading metrics like crown bulk density and crown base height. The outputs from cloud2trees will be prepared for ingestion into the QUIC-Fire model (perhaps this is built into the package by now???) to showcase the framework’s processing efficiency and reliability for timely wildfire behavior modeling. 1.2 Data Data was obtained for four stands in Oregon, Colorado, New Jersey, and Georgia. Data was provided from USDA and SERDP funded projects to include different combinations of ALS, UAS-LiDAR, and UAS-SfM datasets. Datasets covered a total of 2,900 hectares of point cloud data. During this analysis, we found that when the raw point cloud was cropped to an irregularly-shaped study area (potentially with a buffer), rather than using a rectangular bounding box, the resulting Digital Terrain Model (DTM) outputs did not meet the LANL TREES program’s specifications. The LANL TREES program specifically requires a DTM with a complete, rectangular spatial extent (i.e., no missing elevation values) for its input file. Furthermore, incomplete point cloud data, leading to gaps in tree detection across the simulation area, resulted in irregular and potentially unreliable fire modeling simulation runs. For this specific project the data completeness was as follows: Complete Sycan Marsh ALS 2021 Salt Cabin ALS 2021 Salt Cabin UAS 2023 Incomplete Sycan Marsh UAS 2023 New Jersey ALS 2012 New Jersey UAS 2024 Fort Stewart ALS 2018 Fort Stewart ALS 2025 1.3 Processing Workflow "],["data-preparation.html", "Section 2 Data Preparation 2.1 Study Sites 2.2 Point Cloud Data 2.3 ITD window functions 2.4 Other plotting functions", " Section 2 Data Preparation Let’s check out the data we need to process and create: 1) a processing data frame; 2) a LAS catalog (lidR package) with information on the point cloud data The priority list for processing this data is: Sycan ALS Fort Stewart ALS New Jersey ALS Salt Cabin SfM Fort Stewart UAS Lidar Sycan UAS Lidar Salt Cabin ALS I considered creating an automated pipeline to process all of the data but instead will create individual sections for each of the study sites and process them manually. This will overcome the challenge of defining unique variable window functions for use in ITD which we’ll tune using cloud2trees::itd_tuning() Load the standard libraries we use to do work # bread-and-butter library(tidyverse) # the tidyverse library(viridis) # viridis colors library(harrypotter) # hp colors library(RColorBrewer) # brewer colors library(scales) # work with number and plot scales library(latex2exp) # visualization library(mapview) # interactive html maps library(kableExtra) # tables library(patchwork) # combine plots library(ggmap) # correlation plots # spatial analysis library(terra) # raster library(sf) # simple features library(lidR) # lidar data library(rgl) # 3d plots library(cloud2trees) # the cloud2trees 2.1 Study Sites let’s check out the vector data of the study sites dir_temp &lt;- &quot;../data&quot; # what vector data? df_temp &lt;- list.files(dir_temp, pattern = &quot;.*\\\\.(shp|gpkg)$&quot;, recursive = T) %&gt;% dplyr::tibble() %&gt;% setNames(&quot;fpath&quot;) %&gt;% dplyr::filter( !str_detect(fpath, &quot;point_cloud_processing&quot;) ) %&gt;% dplyr::mutate( study_site = dirname(fpath) , fpath = file.path(dir_temp, fpath) , fdir = dirname(fpath) ) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::filter(dplyr::row_number()==1) %&gt;% dplyr::ungroup() if(nrow(df_temp)==0){stop(&quot;no vector data found&quot;)} # load in the vector data study_sites_sf &lt;- 1:nrow(df_temp) %&gt;% purrr::map(\\(x) sf::st_read( dsn = df_temp$fpath[x] ) %&gt;% # put all in the same projection sf::st_transform(crs=5070) %&gt;% dplyr::mutate(study_site = df_temp$study_site[x]) %&gt;% dplyr::select(study_site) ) %&gt;% dplyr::bind_rows() %&gt;% dplyr::inner_join(df_temp, by = &quot;study_site&quot;) ## Reading layer `Burn Unit F6_6&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\FortStewart\\Burn Unit F6_6.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 6 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 431049.1 ymin: 3543511 xmax: 434589.8 ymax: 3545826 ## Projected CRS: WGS 84 / UTM zone 17N ## Reading layer `CB_BurnBlock&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\NewJersey\\CB_BurnBlock.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 13 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 525216.5 ymin: 365372.9 xmax: 529448.3 ymax: 370453.3 ## Projected CRS: NAD83 / New Jersey (ftUS) ## Reading layer `SaltCabin_Unit2_Boundary&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\SaltCabin\\SaltCabin_Unit2_Boundary.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 4 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 453612.2 ymin: 4502029 xmax: 454053.5 ymax: 4502398 ## Projected CRS: NAD83 / UTM zone 13N ## Reading layer `Sycan_2A&#39; from data source ## `C:\\Data\\usfs\\dod_cloud2trees_demo\\data\\SycanMarsh\\Sycan_2A.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 10 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 4748335 ymin: 436780.6 xmax: 4750706 ymax: 438275.2 ## Projected CRS: NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet # figure out where the point cloud data is ptcld_df_temp &lt;- 1:nrow(study_sites_sf) %&gt;% purrr::map(function(x){ # look for dirs with las/laz dirs &lt;- study_sites_sf$fdir[x] %&gt;% list.files(pattern = &quot;.*\\\\.(laz|las)$&quot;, recursive = T, full.names = T) %&gt;% dirname() %&gt;% tolower() %&gt;% unique() %&gt;% purrr::keep( ~ !stringr::str_detect(.x, &quot;point_cloud_processing&quot;) ) # gen df df &lt;- dplyr::tibble( als_dir = character(1) , uas_lidar_dir = character(1) , uas_sfm_dir = character(1) ) %&gt;% dplyr::mutate( als_dir = purrr::keep(dirs, ~ stringr::str_detect(.x, &quot;als&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , uas_lidar_dir = purrr::keep(dirs, ~ stringr::str_detect(.x, &quot;uas&quot;) &amp; stringr::str_detect(.x, &quot;lidar&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , uas_sfm_dir = purrr::keep(dirs, ~ stringr::str_detect(.x, &quot;uas&quot;) &amp; stringr::str_detect(.x, &quot;sfm&quot;))[1] %&gt;% dplyr::coalesce(as.character(NA)) , fdir = study_sites_sf$fdir[x] ) return(df) }) %&gt;% dplyr::bind_rows() # add ptcld dirs to data study_sites_sf &lt;- study_sites_sf %&gt;% dplyr::left_join(ptcld_df_temp, by = &quot;fdir&quot;) # what? study_sites_sf %&gt;% dplyr::glimpse() ## Rows: 4 ## Columns: 7 ## $ study_site &lt;chr&gt; &quot;FortStewart&quot;, &quot;NewJersey&quot;, &quot;SaltCabin&quot;, &quot;SycanMarsh&quot; ## $ fpath &lt;chr&gt; &quot;../data/FortStewart/Burn Unit F6_6.shp&quot;, &quot;../data/NewJe… ## $ fdir &lt;chr&gt; &quot;../data/FortStewart&quot;, &quot;../data/NewJersey&quot;, &quot;../data/Sal… ## $ als_dir &lt;chr&gt; &quot;../data/fortstewart/als_2018_laz_files&quot;, &quot;../data/newje… ## $ uas_lidar_dir &lt;chr&gt; &quot;../data/fortstewart/not_actually_uas_lidar_but_data_use… ## $ uas_sfm_dir &lt;chr&gt; NA, NA, &quot;../data/saltcabin/uas_sfm_2024&quot;, NA ## $ geometry &lt;POLYGON [m]&gt; POLYGON ((1336943 1097560, ..., POLYGON ((1817860 207637… where are these places? # first plot a point so we can see it on the map mapview::mapview( study_sites_sf %&gt;% sf::st_centroid() %&gt;% dplyr::select(&quot;study_site&quot;) , zcol = &quot;study_site&quot; , cex = 7 , label = T , legend = T , popup = T , layer.name = &quot;study areas&quot; ) + # add the study bounds mapview::mapview( study_sites_sf , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , label = F , legend = F , popup = F ) let’s create a pretty name for each site study_sites_sf &lt;- study_sites_sf %&gt;% dplyr::mutate( study_site_lab = dplyr::case_match( tolower(study_site) , &quot;fortstewart&quot; ~ &quot;Fort Stewart (GA)&quot; , &quot;newjersey&quot; ~ &quot;Cedar Bridge (NJ)&quot; , &quot;saltcabin&quot; ~ &quot;Salt Cabin (CO)&quot; , &quot;sycanmarsh&quot; ~ &quot;Sycan Marsh (OR)&quot; ) %&gt;% dplyr::coalesce(study_site) ) 2.2 Point Cloud Data Let’s check out the point cloud data we got las_df_temp &lt;- study_sites_sf %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site, tidyselect::ends_with(&quot;_dir&quot;)) %&gt;% tidyr::pivot_longer( cols = -c(study_site) , values_drop_na = T ) %&gt;% dplyr::mutate( name = stringr::str_remove_all(name, &quot;_dir&quot;) # !!!!!! the folders must be named with this pattern for date extraction to work !!!!!!!!!!!!!!! # !!!!!! could manually make a lookup table.... but ohwell !!!!!!!!!!!!!!! , als_nm = value %&gt;% stringr::str_extract(&quot;(uas_lidar|uas_sfm|als)_(\\\\d{4})&quot;) , nm = stringr::str_c( study_site , dplyr::coalesce(als_nm, name) , sep = &quot;_&quot; ) ) # directory with the downloaded .las|.laz files study_sites_las_ctg &lt;- 1:nrow(las_df_temp) %&gt;% purrr::map(\\(x) lidR::readLAScatalog(las_df_temp$value[x]) ) names(study_sites_las_ctg) &lt;- las_df_temp$nm # what are these ctgs? study_sites_las_ctg ## $FortStewart_als_2018 ## class : LAScatalog (v1.4 format 6) ## extent : 1336000, 1340000, 1095000, 1098000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / Conus Albers + NAVD88 height - Geoid12B (Meters) ## area : 9 km² ## points : 43.07 million points ## type : airborne ## density : 4.8 points/m² ## density : 3.1 pulses/m² ## num. files : 9 ## ## $FortStewart_als_2025 ## class : LAScatalog (v1.4 format 6) ## extent : 430500, 434700, 3543200, 3546000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / NAD83(2011) / UTM zone 17N + NAVD88 ## area : 6.86 km² ## points : 340.22 million points ## type : airborne ## density : 49.6 points/m² ## density : 27.8 pulses/m² ## num. files : 14 ## ## $NewJersey_als_2012 ## class : LAScatalog (v1.2 format 1) ## extent : 552848.7, 554163.1, 4409783, 4411353 (xmin, xmax, ymin, ymax) ## coord. ref. : NA ## area : 6.19 kunits² ## points : 80.3 million points ## type : airborne ## density : 13 points/units² ## num. files : 3 ## ## $NewJersey_uas_lidar_2024 ## class : LAScatalog (v1.2 format 3) ## extent : 552586.1, 554255.9, 4409595, 4411461 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / UTM zone 18N ## area : 5.62 km² ## points : 758.27 million points ## type : airborne ## density : 134.9 points/m² ## num. files : 4 ## ## $SaltCabin_als_2021 ## class : LAScatalog (v1.4 format 0) ## extent : -801159, -797999, 2001522, 2003352 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / Conus Albers ## area : 5.6 km² ## points : 35.22 million points ## type : airborne ## density : 6.3 points/m² ## density : 6.3 pulses/m² ## num. files : 2 ## ## $SaltCabin_uas_sfm_2024 ## class : LAScatalog (v1.2 format 3) ## extent : 453536.8, 454139, 4501977, 4502440 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 13N ## area : 278704 m² ## points : 94.51 million points ## type : terrestrial ## density : 339.1 points/m² ## num. files : 1 ## ## $SycanMarsh_als_2021 ## class : LAScatalog (v1.4 format 6) ## extent : 651000, 653000, 4747000, 4748000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / UTM zone 10N + NAVD88 height - Geoid18 (m) ## area : 2 km² ## points : 68.02 million points ## type : airborne ## density : 34 points/m² ## density : 25.6 pulses/m² ## num. files : 2 ## ## $SycanMarsh_uas_lidar_2023 ## class : LAScatalog (v1.2 format 3) ## extent : 651487, 652298.4, 4747227, 4747880 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 10N ## area : 0.53 km² ## points : 200.55 million points ## type : terrestrial ## density : 378.3 points/m² ## density : 350.8 pulses/m² ## num. files : 1 plot the point cloud catalog with the stand boundary ggplot2::ggplot() + ggplot2::geom_sf( data = study_sites_sf %&gt;% dplyr::slice(1) , color = &quot;navy&quot;, fill = NA ) + ggplot2::geom_sf( data = study_sites_las_ctg[[1]]$geometry %&gt;% sf::st_transform(sf::st_crs(study_sites_sf)) , color = &quot;gray33&quot;, fill = NA ) + ggplot2::theme_light() # lidR::st_crs(ctg_temp[[3]]) let’s make a quick function to grab a background map (e.g. like a Google Map) for an AOI using the ggmap package library(ggmap) library(ggspatial) ######################################################################### ######################################################################### # Make each plot individually by landscape as solution to small multiples # this block defines function ######################################################################### ##################hack to align plots for ggmap ggmap_bbox_fn &lt;- function(map, my_crs=3857) { if (!inherits(map, &quot;ggmap&quot;)) stop(&quot;map must be a ggmap object&quot;) # Extract the bounding box (in lat/lon) from the ggmap to a numeric vector, # and set the names to what sf::st_bbox expects: map_bbox &lt;- setNames(unlist(attr(map, &quot;bb&quot;)), c(&quot;ymin&quot;, &quot;xmin&quot;, &quot;ymax&quot;, &quot;xmax&quot;)) # Convert the bbox to an sf polygon, transform it to 3857, # and convert back to a bbox (convoluted, but it works) bbox_3857 &lt;- st_bbox(st_transform(st_as_sfc(st_bbox(map_bbox, crs = 4326)), my_crs)) # Overwrite the bbox of the ggmap object with the transformed coordinates attr(map, &quot;bb&quot;)$ll.lat &lt;- bbox_3857[&quot;ymin&quot;] attr(map, &quot;bb&quot;)$ll.lon &lt;- bbox_3857[&quot;xmin&quot;] attr(map, &quot;bb&quot;)$ur.lat &lt;- bbox_3857[&quot;ymax&quot;] attr(map, &quot;bb&quot;)$ur.lon &lt;- bbox_3857[&quot;xmax&quot;] map } plt_crs &lt;- 3857 ######################################################################### ######################################################################### # for google maps... have to: # 1) get api key at https://console.cloud.google.com/apis/dashboard # 2) run ggmap::register_google(key = &quot;mykey_xxxxxxxxx&quot;, write = T) ######################################################################### my_ggmap_basemap &lt;- function( sf_data , zoom_level = 14 # from 3 (continent) to 21 (building), default value 10 (city) , buffer_box = 2600 , my_crs = plt_crs , scale_location = &quot;bl&quot; , my_maptype = &quot;stamen_terrain&quot; ## stamen # stamen_terrain, stamen_toner, stamen_toner_lite, stamen_watercolor, stamen_terrain_background # , stamen_toner_background, stamen_terrain_lines, stamen_terrain_labels # , stamen_toner_lines, stamen_toner_labels ## googlmap # &quot;terrain&quot;, &quot;satellite&quot;, &quot;roadmap&quot;, and &quot;hybrid&quot; , add_sf_data = F , outline_sf_data_col = &quot;white&quot; , outline_lwd = 0.7 ) { # # should zoom in? # zoom_level &lt;- 14 # 11 # # should buffer extend? # buffer_box &lt;- 2600 # 20000 # bounding box bb_temp &lt;- sf_data %&gt;% sf::st_bbox() %&gt;% sf::st_as_sfc() %&gt;% sf::st_transform(crs=5070) %&gt;% sf::st_buffer(as.numeric(buffer_box)) %&gt;% sf::st_transform(crs=4326) center_temp &lt;- sf::st_centroid(bb_temp) %&gt;% sf::st_coordinates() %&gt;% .[1,] # set bbox for get call bb_temp &lt;- sf::st_bbox(bb_temp) bbox_temp &lt;- c( bottom = bb_temp[[2]] , top = bb_temp[[4]] , right = bb_temp[[3]] , left = bb_temp[[1]] ) # ggmap::get_stadiamap vs ggmap::get_googlemap if( tolower(my_maptype) %in% c(&quot;terrain&quot;, &quot;satellite&quot;, &quot;roadmap&quot;, &quot;hybrid&quot;) ){ is_google &lt;- T hey_ggmap &lt;- ggmap::get_googlemap( center = center_temp , zoom = zoom_level , maptype = tolower(my_maptype) , crop = T ) }else{ is_google &lt;- F hey_ggmap &lt;- ggmap::get_stadiamap( bbox = bbox_temp , zoom = zoom_level , maptype = tolower(my_maptype) #&quot;stamen_terrain&quot; #&quot;stamen_toner_lite&quot; , crop = T ) # ggmap::ggmap(hey_ggmap) # apply align function hey_ggmap &lt;- ggmap_bbox_fn(hey_ggmap, my_crs) # Use the function } # plot plt_basemap &lt;- ggmap::ggmap(hey_ggmap) + ggplot2::coord_sf( expand = FALSE ) + ggplot2::theme_light() + ggplot2::theme( legend.position = &quot;none&quot; , plot.title = ggplot2::element_blank() , strip.text = ggplot2::element_blank() , axis.title = ggplot2::element_blank() , axis.text = ggplot2::element_blank() , axis.ticks = ggplot2::element_blank() , panel.grid = ggplot2::element_blank() , plot.margin = ggplot2::margin(0, 0, 0, 0, &quot;cm&quot;) ) ### add data? if(scale_location %in% c(&quot;bl&quot;, &quot;br&quot;, &quot;tr&quot;, &quot;tl&quot;)){ plt_basemap &lt;- plt_basemap + ggspatial::annotation_scale( location = scale_location , style = &quot;ticks&quot; , pad_x = unit(0.1, &quot;cm&quot;) , pad_y = unit(0.1, &quot;cm&quot;) ) } if(add_sf_data){ if(is_google){ plt_basemap &lt;- plt_basemap + ggplot2::geom_sf( data = sf_data %&gt;% sf::st_transform(4326) , fill = NA, color = outline_sf_data_col, lwd = outline_lwd , inherit.aes = F ) # ggplot2::geom_path( # data = sf_data %&gt;% # sf::st_transform(4326) %&gt;% # st_coordinates() %&gt;% # as.data.frame() %&gt;% # dplyr::mutate(lon = X, lat = Y) %&gt;% # sf::st_as_sf(coords = c(&quot;X&quot;,&quot;Y&quot;), crs = 4326) # , fill = NA, color = outline_sf_data_col # , inherit.aes = F # ) }else{ plt_basemap &lt;- plt_basemap + ggplot2::geom_sf( data = sf_data %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, color = outline_sf_data_col, lwd = outline_lwd , inherit.aes = F ) } } return(plt_basemap) } make a function specific to this data and task to grab the basemap with my_ggmap_basemap() and overlay the point cloud data and the study area bounds plt_fn_temp &lt;- function( record_study_sites_las_ctg , my_study_sites_las_ctg = study_sites_las_ctg , my_study_sites_sf = study_sites_sf # , zoom_level = 14, buffer_box = 2600, my_crs = plt_crs, scale_location = &quot;bl&quot;, my_maptype = &quot;stamen_terrain&quot; ) { # make a function to grab the basemap with my_ggmap_basemap, and overlay the point cloud data and the study area bounds plt_basemap_temp &lt;- my_ggmap_basemap( sf_data = my_study_sites_las_ctg[[record_study_sites_las_ctg]]$geometry , zoom_level = 14 , buffer_box = 3333 , my_crs = plt_crs , scale_location = &quot;bl&quot; , my_maptype = &quot;stamen_terrain&quot; ) # plot plt2_temp &lt;- plt_basemap_temp + ggplot2::geom_sf( data = my_study_sites_las_ctg[[record_study_sites_las_ctg]]$geometry %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, lwd = 0.7, color = &quot;gray8&quot; , inherit.aes = F ) + ggplot2::geom_sf( data = my_study_sites_sf %&gt;% dplyr::filter( study_site %in% (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::word(sep = &quot;_&quot;)) ) %&gt;% sf::st_transform(crs=plt_crs) , fill = NA, color = &quot;navy&quot;, lwd = 1.4 , inherit.aes = F ) + ggplot2::labs( subtitle = paste0( my_study_sites_sf %&gt;% dplyr::filter( study_site %in% (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::word(sep = &quot;_&quot;)) ) %&gt;% dplyr::pull(study_site_lab) , &quot;\\n&quot; , (my_study_sites_las_ctg[record_study_sites_las_ctg] %&gt;% names() %&gt;% stringr::str_replace_all(&quot;_&quot;,&quot; &quot;) %&gt;% stringr::str_replace(&quot;^\\\\S+\\\\s*&quot;, &quot;&quot;) %&gt;% toupper() ) , &quot; data&quot; ) ) return( plt2_temp ) } # for each las ctg with crs sf::st_crs(study_sites_las_ctg$NewJersey_als_2012) &lt;- paste0(&quot;EPSG:&quot;, 32618) # D; plts_temp &lt;- 1:length(study_sites_las_ctg %&gt;% purrr::discard(names(.) %in% c(&quot;FortStewart_uas_lidar&quot;,&quot;NewJersey_als&quot;))) %&gt;% purrr::map( \\(x) plt_fn_temp( record_study_sites_las_ctg = x , my_study_sites_las_ctg = study_sites_las_ctg %&gt;% purrr::discard(names(.) %in% c(&quot;FortStewart_uas_lidar&quot;,&quot;NewJersey_als&quot;)) , ) ) # patchwork it patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( theme = ggplot2::theme( plot.title = element_text(size = 7) , plot.subtitle = element_text(size = 7) ) ) # 2.3 ITD window functions # set up initial list with default functions my_ws_functions &lt;- cloud2trees::itd_ws_functions() # add to list my_ws_functions$log_les_ccv_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; exp(5)-1 ~ 5 , TRUE ~ log(x+1) ) return(y) } # add to list my_ws_functions$log_mor_ccv_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; exp(7/1.5)-1 ~ 7 , TRUE ~ 1.5*log(x+1) ) return(y) } # add to list my_ws_functions$lin_lo_slp_fn &lt;- function (x) { y &lt;- dplyr::case_when( is.na(x) ~ 0.001 , x &lt; 0 ~ 0.001 , x &gt; (4-0.75)/0.04 ~ 4 , TRUE ~ 0.75 + (x * 0.04) ) return(y) } run each function over a range of heights to see what they return on a plot # get ws by ht for each fn ws_fn_df &lt;- 1:length(my_ws_functions) %&gt;% purrr::map(function(x){ nm &lt;- my_ws_functions[x] %&gt;% names() %&gt;% as.character() fn &lt;- my_ws_functions[[x]] # est height &lt;- seq(from=0,to=60,by=0.5) ws &lt;- fn(height) %&gt;% unlist() df &lt;- dplyr::tibble( height = height , ws = ws ) %&gt;% dplyr::mutate(ws_fn_nm = nm) %&gt;% dplyr::relocate(ws_fn_nm) return(df) }) %&gt;% dplyr::bind_rows() # huh? ws_fn_df %&gt;% dplyr::glimpse() ## Rows: 726 ## Columns: 3 ## $ ws_fn_nm &lt;chr&gt; &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;lin_fn&quot;, &quot;… ## $ height &lt;dbl&gt; 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6… ## $ ws &lt;dbl&gt; 1.00, 1.00, 1.00, 1.00, 1.03, 1.10, 1.17, 1.24, 1.31, 1.38, 1… plot of all ITD variable window functions for testing ws_fn_df %&gt;% ggplot2::ggplot(mapping = ggplot2::aes(x = height, y = ws, color = ws_fn_nm)) + ggplot2::geom_line(lwd=1) + # ggplot2::scale_color_manual(values = pal_ws) + # ggplot2::scale_color_viridis_d(option = &quot;turbo&quot;) + ggplot2::scale_color_brewer(palette = &quot;Dark2&quot;) + ggplot2::xlim(-3,NA) + ggplot2::ylim(-0.1,NA) + ggplot2::labs( x = &quot;heights&quot;, y = &quot;ws&quot; , color = &quot;variable\\nwindow\\nfunction&quot; , subtitle = &quot;ITD variable window functions for testing&quot; ) + ggplot2::theme_light() + ggplot2::guides( color = ggplot2::guide_legend(override.aes = list(lwd = 6)) ) 2.4 Other plotting functions function to plot raster with vector data overlaid plt_rast_poly_fn &lt;- function( rast , poly , crop = T , mask = F , buff = 22 , col = &quot;red&quot; , lwd = 1 , title = &quot;&quot; , leg_pos = &quot;top&quot; ) { if(crop){ rast &lt;- rast %&gt;% terra::crop( poly %&gt;% sf::st_buffer(buff) %&gt;% sf::st_transform(terra::crs(rast)) %&gt;% terra::vect() ) } if(mask){ rast &lt;- rast %&gt;% terra::mask( poly %&gt;% sf::st_buffer(buff) %&gt;% sf::st_transform(terra::crs(rast)) %&gt;% terra::vect() ) } # Convert SpatRaster to a data frame for ggplot rast_df &lt;- terra::as.data.frame(rast, xy=TRUE) %&gt;% rename(f=3) # Create the base raster plot p &lt;- ggplot2::ggplot() + ggplot2::geom_raster( data = rast_df, aes(x = x, y = y, fill = f) ) + # ggplot2::scale_fill_viridis_c() + # Use a colorblind-friendly palette # ggplot2::coord_sf(crs = terra::crs(rast)) + # Match the CRS ggplot2::labs(fill = &quot;&quot;) + ggplot2::theme_void() + ggplot2::theme( legend.position = leg_pos , legend.text = ggplot2::element_text(angle = 90, vjust = 0.5, size = 7) , plot.subtitle = ggplot2::element_text(hjust = 0.5) # , plot.title = ggplot2::element_text(hjust = 0.5) ) # Add the polygon overlay p &lt;- p + ggplot2::geom_sf( data = poly %&gt;% sf::st_transform(terra::crs(rast)) , fill = NA, color = col, lwd = lwd ) + ggplot2::labs(subtitle = title) return(p) } ##### plt_crown_attr_fn &lt;- function( crowns , aoi , col = &quot;navy&quot; , lwd = 1 , title = &quot;&quot; , leg_pos = &quot;top&quot; # polygon attrs , fill_var , palette = &quot;Blues&quot; # see ggplot2::scale_fill_distiller ) { ggplot2::ggplot( data = aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) + ggplot2::geom_sf(fill = NA, color = col, lwd = lwd) + ggplot2::geom_sf( data = crowns %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) , mapping = ggplot2::aes(fill = .data[[fill_var]]) , color = NA ) + ggplot2::scale_fill_distiller(palette = palette, name = title, direction = 1, labels = scales::comma_format(accuracy = 1)) + ggplot2::theme_void() + ggplot2::theme( legend.position = leg_pos , legend.direction = &quot;horizontal&quot; , legend.title = ggplot2::element_text(size = 7) , legend.text = ggplot2::element_text(size = 6) ) } # load our FIA forest type group raster for use later # load lookup foresttype_lookup &lt;- file.path(cloud2trees::find_ext_data()[[&quot;foresttype_dir&quot;]], &quot;foresttype_lookup.csv&quot;) %&gt;% readr::read_csv(progress = F, show_col_types = F) %&gt;% dplyr::distinct(forest_type_group_code, forest_type_group, hardwood_softwood) %&gt;% dplyr::mutate(forest_type_group = stringr::str_remove(forest_type_group, &quot; group&quot;)) # forest type group summary foresttype_sum_fn &lt;- function(crowns, aoi, unit) { crowns %&gt;% sf::st_drop_geometry() %&gt;% sf::st_as_sf(coords = c(&quot;tree_x&quot;, &quot;tree_y&quot;), crs = sf::st_crs(crowns)) %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate(unit_name = unit) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::count(unit_name, forest_type_group) %&gt;% dplyr::arrange(unit_name, desc(n)) %&gt;% dplyr::group_by(unit_name) %&gt;% dplyr::mutate( pct = scales::percent(n/sum(n), accuracy = 0.1) ) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate(n = scales::comma(n,accuracy=1)) %&gt;% kableExtra::kbl( caption = &quot;Count of trees by FIA Forest Type Group&quot; , digits = 2 , col.names = c( &quot;.&quot; , &quot;&quot; , &quot;# trees&quot; , &quot;% trees&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::collapse_rows(columns = 1, valign = &quot;top&quot;) } # summarize tree metrics stats_sum_fn &lt;- function(crowns, aoi, unit) { crowns %&gt;% sf::st_drop_geometry() %&gt;% sf::st_as_sf(coords = c(&quot;tree_x&quot;, &quot;tree_y&quot;), crs = sf::st_crs(crowns)) %&gt;% sf::st_intersection( aoi %&gt;% sf::st_transform(sf::st_crs(crowns)) ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate(unit_name = unit) %&gt;% dplyr::group_by( unit_name) %&gt;% dplyr::summarise( dplyr::across( c(tree_height_m, dbh_cm, tree_cbh_m, max_crown_diam_height_m, cruz_tree_kg_per_m3, landfire_tree_kg_per_m3) , .fns = list(mean = mean, median = median, sd = sd, min = min, max = max) ) , n = dplyr::n() ) %&gt;% dplyr::ungroup() %&gt;% tidyr::pivot_longer(cols = -c( unit_name,n)) %&gt;% dplyr::mutate( agg = stringr::word(name,-1,sep = &quot;_&quot;) , metric = stringr::str_remove_all(name, paste0(&quot;_&quot;,agg)) ) %&gt;% dplyr::select(-name) %&gt;% dplyr::mutate( value = dplyr::case_when( metric == &quot;tree_height_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;dbh_cm&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;tree_cbh_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;max_crown_diam_height_m&quot; ~ scales::comma(value,accuracy=0.1) , metric == &quot;cruz_tree_kg_per_m3&quot; ~ scales::comma(value,accuracy=0.001) , metric == &quot;landfire_tree_kg_per_m3&quot; ~ scales::comma(value,accuracy=0.001) , T ~ scales::comma(value,accuracy=0.1) ) ) %&gt;% tidyr::pivot_wider(names_from = agg, values_from = value) %&gt;% dplyr::mutate( unit_lab = paste0( unit_name ,&quot;&lt;br&gt;(&quot; , scales::comma(n,accuracy=1) ,&quot; trees)&quot; ) , range = paste0(min, &quot;—&quot;, max) ) %&gt;% dplyr::arrange( unit_name, desc(n)) %&gt;% dplyr::select(-c(unit_name,n,min,max)) %&gt;% dplyr::relocate(unit_lab) %&gt;% dplyr::mutate( metric = factor( metric , ordered = T , levels = c( &quot;tree_height_m&quot; , &quot;dbh_cm&quot; , &quot;tree_cbh_m&quot; , &quot;max_crown_diam_height_m&quot; , &quot;cruz_tree_kg_per_m3&quot; , &quot;landfire_tree_kg_per_m3&quot; ) , labels = c( &quot;Height (m)&quot; , &quot;DBH (cm)&quot; , &quot;Crown Base Ht. (m)&quot; , &quot;HMD (m)&quot; , &quot;Cruz CBD&lt;br&gt;kg m&lt;sup&gt;-3&lt;/sup&gt;&quot; , &quot;LANDFIRE CBD&lt;br&gt;kg m&lt;sup&gt;-3&lt;/sup&gt;&quot; ) ) ) %&gt;% kableExtra::kbl( caption = &quot;Summary statistics for selected metrics&quot; , col.names = c( &quot;Unit Name&quot;, &quot;Metric&quot; , &quot;Mean&quot;, &quot;Median&quot; , &quot;Std Dev&quot;, &quot;Range&quot; ) , escape = F # , digits = 2 ) %&gt;% kableExtra::kable_styling(font_size = 13) %&gt;% kableExtra::collapse_rows(columns = 1, valign = &quot;top&quot;) } "],["sycmarsh.html", "Section 3 Sycan Marsh (OR) 3.1 ALS Processing 3.2 UAS lidar Processing", " Section 3 Sycan Marsh (OR) process the point cloud data for the Sycan Marsh (OR) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;SycanMarsh&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[1]]$geometry , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $SycanMarsh_als_2021 ## class : LAScatalog (v1.4 format 6) ## extent : 651000, 653000, 4747000, 4748000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / UTM zone 10N + NAVD88 height - Geoid18 (m) ## area : 2 km² ## points : 68.02 million points ## type : airborne ## density : 34 points/m² ## density : 25.6 pulses/m² ## num. files : 2 ## ## $SycanMarsh_uas_lidar_2023 ## class : LAScatalog (v1.2 format 3) ## extent : 651487, 652298.4, 4747227, 4747880 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 10N ## area : 0.53 km² ## points : 200.55 million points ## type : terrestrial ## density : 378.3 points/m² ## density : 350.8 pulses/m² ## num. files : 1 3.1 ALS Processing 3.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SycanMarsh_als_2021&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SycanMarsh_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 2 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SycanMarsh_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 6, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 3.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2021_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 3.1.3 cloud2trees Results 3.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 3.1: Count of trees by FIA Forest Type Group . # trees % trees Sycan Marsh (OR) Ponderosa pine group 4,205 100.0% 3.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 3.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 3.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 3.1.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 3.1.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) Table 3.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Sycan Marsh (OR) - ALS(4,205 trees) Height (m) 12.7 12.8 6.1 2.0—33.8 DBH (cm) 24.2 23.1 13.8 3.6—79.0 Crown Base Ht. (m) 3.8 3.8 1.1 1.5—15.5 HMD (m) 5.3 5.5 1.8 0.0—18.5 Cruz CBDkg m-3 0.420 0.414 0.116 0.107—1.253 LANDFIRE CBDkg m-3 0.217 0.200 0.131 0.097—1.953 3.2 UAS lidar Processing 3.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SycanMarsh_uas_lidar_2023&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SycanMarsh_uas_lidar.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 2 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_SycanMarsh_uas_lidar.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 6, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$lin_fn 3.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;uas_lidar_2023_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 3.2.3 cloud2trees Results 3.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 3.3: Count of trees by FIA Forest Type Group . # trees % trees Sycan Marsh (OR) Ponderosa pine group 4,435 100.0% 3.2.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 3.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 3.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 3.2.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 3.2.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) Table 3.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Sycan Marsh (OR) - UAS Lidar(4,435 trees) Height (m) 11.5 11.2 6.9 2.0—34.2 DBH (cm) 22.4 19.5 15.7 3.6—82.0 Crown Base Ht. (m) 4.1 4.0 1.6 1.5—14.5 HMD (m) 4.8 4.7 2.7 0.1—16.6 Cruz CBDkg m-3 0.299 0.289 0.099 0.090—1.852 LANDFIRE CBDkg m-3 0.147 0.134 0.075 0.052—1.188 "],["fort-stewart-ga.html", "Section 4 Fort Stewart (GA) 4.1 ALS (2018) Processing 4.2 ALS (2025) Processing", " Section 4 Fort Stewart (GA) process the point cloud data for the Fort Stewart (GA) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;FortStewart&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[1]]$geometry , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $FortStewart_als_2018 ## class : LAScatalog (v1.4 format 6) ## extent : 1336000, 1340000, 1095000, 1098000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / Conus Albers + NAVD88 height - Geoid12B (Meters) ## area : 9 km² ## points : 43.07 million points ## type : airborne ## density : 4.8 points/m² ## density : 3.1 pulses/m² ## num. files : 9 ## ## $FortStewart_als_2025 ## class : LAScatalog (v1.4 format 6) ## extent : 430500, 434700, 3543200, 3546000 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83(2011) / NAD83(2011) / UTM zone 17N + NAVD88 ## area : 6.86 km² ## points : 340.22 million points ## type : airborne ## density : 49.6 points/m² ## density : 27.8 pulses/m² ## num. files : 14 4.1 ALS (2018) Processing 4.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;FortStewart_als_2018&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_FortStewart_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.3 ) ggplot2::ggsave( &quot;../data/itd_tuning_FortStewart_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 4.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2018_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.3 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.3m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 4.1.3 cloud2trees Results 4.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 4.1: Count of trees by FIA Forest Type Group . # trees % trees Fort Stewart (GA) Loblolly / shortleaf pine group 95,838 62.7% Longleaf / slash pine group 30,660 20.1% Oak / gum / cypress group 26,376 17.2% Oak / pine group 43 0.0% 4.1.3.2 DTM this is a large area so we’re going to make the raster more coarse plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) this is lowland 4.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.1) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.1 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) 4.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf %&gt;% sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) , zoom_level = 17 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = F ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 4.1.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.2) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 4.1.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS 2018&quot;) ) Table 4.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Fort Stewart (GA) - ALS 2018(152,917 trees) Height (m) 17.5 18.7 6.2 2.0—38.4 DBH (cm) 22.2 23.0 8.9 3.4—67.6 Crown Base Ht. (m) 11.4 12.4 3.6 1.5—25.5 HMD (m) 9.8 10.6 3.6 0.1—27.1 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.235 0.251 0.119 0.005—1.278 4.2 ALS (2025) Processing 4.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;FortStewart_als_2025&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/FortStewart_als_2025.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.25 ) ggplot2::ggsave( &quot;../data/FortStewart_als_2025.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$exp_fn 4.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2025_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 4.2.3 cloud2trees Results 4.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 4.3: Count of trees by FIA Forest Type Group . # trees % trees Fort Stewart (GA) Loblolly / shortleaf pine group 44,649 60.2% Oak / gum / cypress group 17,110 23.1% Longleaf / slash pine group 12,431 16.8% Oak / pine group 15 0.0% 4.2.3.2 DTM this is a large area so we’re going to make the raster more coarse plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) this is lowland 4.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.2) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.1 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) 4.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf %&gt;% sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) , zoom_level = 17 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = F ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 4.2.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.4) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 4.2.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS 2025&quot;) ) Table 4.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Fort Stewart (GA) - ALS 2025(74,205 trees) Height (m) 19.0 20.5 6.5 2.0—36.9 DBH (cm) 24.9 26.3 9.7 3.4—64.0 Crown Base Ht. (m) 9.4 10.0 3.0 1.5—24.5 HMD (m) 10.2 10.8 4.1 0.1—27.8 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.358 0.336 0.224 0.009—1.931 "],["salt-cabin-co.html", "Section 5 Salt Cabin (CO) 5.1 ALS Processing 5.2 UAS sfm Processing", " Section 5 Salt Cabin (CO) process the point cloud data for the Salt Cabin (CO) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;SaltCabin&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( aoi_las_ctg[[&quot;SaltCabin_als_2021&quot;]]@data %&gt;% dplyr::select(filename) , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $SaltCabin_als_2021 ## class : LAScatalog (v1.4 format 0) ## extent : -801159, -797999, 2001522, 2003352 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / Conus Albers ## area : 5.6 km² ## points : 35.22 million points ## type : airborne ## density : 6.3 points/m² ## density : 6.3 pulses/m² ## num. files : 2 ## ## $SaltCabin_uas_sfm_2024 ## class : LAScatalog (v1.2 format 3) ## extent : 453536.8, 454139, 4501977, 4502440 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 13N ## area : 278704 m² ## points : 94.51 million points ## type : terrestrial ## density : 339.1 points/m² ## num. files : 1 5.1 ALS Processing 5.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SaltCabin_als_2021&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::filter(stringr::str_detect(filename,&quot;USGS_LPC_CO_CameronPeakWildfire_2021_D21_w2985n1485_reproj&quot;)) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SaltCabin_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.25 ) ggplot2::ggsave( &quot;../data/itd_tuning_SaltCabin_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7.5, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 5.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2021_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 5.1.3 cloud2trees Results 5.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 5.1: Count of trees by FIA Forest Type Group . # trees % trees Salt Cabin (CO) Ponderosa pine group 5,537 76.6% Aspen / birch group 1,194 16.5% Pinyon / juniper group 188 2.6% Douglas-fir group 153 2.1% Woodland hardwoods group 86 1.2% Fir / spruce / mountain hemlock group 35 0.5% Lodgepole pine group 31 0.4% 5.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 5.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 5.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 5.1.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 5.1.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) Table 5.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Salt Cabin (CO) - ALS(7,224 trees) Height (m) 7.7 6.6 4.5 2.0—21.6 DBH (cm) 12.5 10.0 7.7 3.6—40.5 Crown Base Ht. (m) 3.4 3.5 0.8 1.5—8.5 HMD (m) 3.3 3.3 1.0 0.2—10.7 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.094 0.088 0.070 0.009—1.190 5.2 UAS sfm Processing 5.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;SaltCabin_uas_sfm_2024&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_SaltCabin_uas_sfm.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions , chm_res_m = 0.25 ) ggplot2::ggsave( &quot;../data/itd_tuning_SaltCabin_uas_sfm.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 5.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;uas_sfm_2024_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 5.2.3 cloud2trees Results 5.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 5.3: Count of trees by FIA Forest Type Group . # trees % trees Salt Cabin (CO) Ponderosa pine group 2,728 76.4% Aspen / birch group 619 17.3% Pinyon / juniper group 80 2.2% Douglas-fir group 67 1.9% Woodland hardwoods group 39 1.1% Lodgepole pine group 21 0.6% Fir / spruce / mountain hemlock group 17 0.5% 5.2.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) 5.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) 5.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date we’ll sample the trees here so the output can be seen more clearly # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 5.2.3.5 Tree Attributes Spatial plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = cloud2trees_ans$crowns_sf , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 5.2.3.6 Tree Attributes Summary Stats stats_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = paste0(aoi_sf$study_site_lab, &quot; - UAS SfM&quot;)) Table 5.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Salt Cabin (CO) - UAS SfM(3,571 trees) Height (m) 9.2 8.3 4.9 2.0—22.5 DBH (cm) 16.3 13.5 10.0 3.7—48.9 Crown Base Ht. (m) 4.3 4.3 1.6 1.5—12.5 HMD (m) 3.7 3.6 1.9 0.1—14.7 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.113 0.108 0.078 0.016—1.307 "],["cedar-bridge-nj.html", "Section 6 Cedar Bridge (NJ) 6.1 ALS Processing 6.2 UAS lidar Processing", " Section 6 Cedar Bridge (NJ) process the point cloud data for the Cedar Bridge (NJ) study site let’s check out the data we have and the area # just get the data we care about aoi_study_site &lt;- &quot;NewJersey&quot; aoi_sf &lt;- study_sites_sf %&gt;% dplyr::filter(study_site == aoi_study_site) aoi_las_ctg &lt;- study_sites_las_ctg %&gt;% purrr::keep_at( names(study_sites_las_ctg)[ stringr::str_detect(names(study_sites_las_ctg), aoi_study_site) ] ) # option to put satellite imagery as base layer of mapview maps mapview::mapviewOptions( homebutton = FALSE , basemaps = c(&quot;Esri.WorldImagery&quot;,&quot;OpenStreetMap&quot;) ) # map it # add the study bounds mapview::mapview( sf::st_set_crs(aoi_las_ctg[[1]]$geometry, value = 32618) , color = &quot;black&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[1]) , legend = F , popup = F ) + mapview::mapview( aoi_las_ctg[[2]]$geometry , color = &quot;gray&quot; , lwd = 2 , alpha.regions = 0 , layer.name = names(aoi_las_ctg[2]) , legend = F , popup = F ) + mapview::mapview( aoi_sf , zcol = &quot;study_site_lab&quot; , color = &quot;navy&quot; , lwd = 2 , alpha.regions = 0 , legend = T , popup = F ) point cloud data summary aoi_las_ctg ## $NewJersey_als_2012 ## class : LAScatalog (v1.2 format 1) ## extent : 552848.7, 554163.1, 4409783, 4411353 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 18N ## area : 6.19 km² ## points : 80.3 million points ## type : airborne ## density : 13 points/m² ## num. files : 3 ## ## $NewJersey_uas_lidar_2024 ## class : LAScatalog (v1.2 format 3) ## extent : 552586.1, 554255.9, 4409595, 4411461 (xmin, xmax, ymin, ymax) ## coord. ref. : NAD83 / UTM zone 18N ## area : 5.62 km² ## points : 758.27 million points ## type : airborne ## density : 134.9 points/m² ## num. files : 4 6.1 ALS Processing 6.1.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;NewJersey_als_2012&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_NewJersey_als.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_NewJersey_als.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 6.1.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;als_2012_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp ## !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! This data has a missing CRS ;[ ## !!!!! setting new_crs to the epsg code of the crs i was told ## !!!!! The EPSG code for UTM zone 18N in the World Geodetic System of 1984 (WGS 84) is 32618 , new_crs = 32618 , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 6.1.3 cloud2trees Results 6.1.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 6.1: Count of trees by FIA Forest Type Group . # trees % trees Cedar Bridge (NJ) Loblolly / shortleaf pine group 110,027 99.1% Oak / hickory group 541 0.5% Oak / pine group 425 0.4% 6.1.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 6.1.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.3) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) 6.1.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list plt_aoi_basemap &lt;- my_ggmap_basemap( sf_data = aoi_sf , zoom_level = 16 , buffer_box = 22 , my_maptype = &quot;satellite&quot; , add_sf_data = T , outline_sf_data_col = &quot;navy&quot; , outline_lwd = 1 ) # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 6.1.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.5) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 6.1.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - ALS&quot;) ) Table 6.2: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Cedar Bridge (NJ) - ALS(110,993 trees) Height (m) 8.9 9.1 3.6 2.0—33.2 DBH (cm) 15.4 15.2 7.2 3.7—82.0 Crown Base Ht. (m) 3.8 3.8 0.9 1.5—13.5 HMD (m) 4.3 4.5 1.3 0.0—17.1 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.239 0.232 0.090 0.012—1.827 6.2 UAS lidar Processing 6.2.1 ITD tuning put las files in a list # list of all las files las_flist_temp &lt;- aoi_las_ctg[[&quot;NewJersey_uas_lidar_2024&quot;]] %&gt;% purrr::pluck(&quot;data&quot;) %&gt;% dplyr::pull(filename) run tuning # if there is an error with tuning...is it because there are no trees for a given ws_fn? # Caused by error in `dplyr::group_by()`: # ! Must group by variables found in `.data`. # Column `ws_fn` is not found. if(!file.exists(&quot;../data/itd_tuning_NewJersey_uas_lidar.jpg&quot;)){ # tuning itd_tuning_ans &lt;- cloud2trees::itd_tuning( input_las_dir = las_flist_temp , n_samples = 3 , ws_fn_list = my_ws_functions ) ggplot2::ggsave( &quot;../data/itd_tuning_NewJersey_uas_lidar.jpg&quot; , plot = itd_tuning_ans$plot_samples , dpi = &quot;print&quot; , height = 7, width = 10 ) } pick the best function for use in ITD # pick the best function for use in ITD best_ws_fn_temp &lt;- my_ws_functions$log_les_ccv_fn 6.2.2 cloud2trees point cloud processing dir_temp &lt;- file.path(aoi_sf$fdir, &quot;uas_lidar_2024_processing&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) # c2t cloud2trees_ans &lt;- cloud2trees::cloud2trees( input_las_dir = las_flist_temp , output_dir = dir_temp , ws = best_ws_fn_temp , dtm_res_m = 1 , chm_res_m = 0.25 , estimate_tree_dbh = T , estimate_tree_type = T # hmd , estimate_tree_hmd = T , hmd_tree_sample_prop = 0.5 , hmd_estimate_missing_hmd = T # biomass , estimate_biomass_method = c(&quot;landfire&quot;,&quot;cruz&quot;) # cbh , estimate_tree_cbh = T , cbh_tree_sample_prop = 0.5 , cbh_estimate_missing_cbh = T ) # add foresttype cloud2trees_ans$foresttype_rast &lt;- terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) }else{ cloud2trees_ans &lt;- list( &quot;dtm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;dtm_1m.tif&quot;) ) , &quot;chm_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;chm_0.25m.tif&quot;) ) , &quot;crowns_sf&quot; = list.files( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;) , pattern = &quot;final_detected_crowns.*\\\\.gpkg$&quot; , full.names = T ) %&gt;% normalizePath() %&gt;% purrr::map(\\(x) sf::st_read( dsn = x , quiet = T ) ) %&gt;% dplyr::bind_rows() , &quot;foresttype_rast&quot; = terra::rast( file.path(dir_temp, &quot;point_cloud_processing_delivery&quot;, &quot;fia_foresttype_raster.tif&quot;) ) %&gt;% terra::subst(from = foresttype_lookup$forest_type_group_code, to = foresttype_lookup$forest_type_group) ) } 6.2.3 cloud2trees Results 6.2.3.1 FIA Forest Type Group # load raster plt_rast_poly_fn( rast = cloud2trees_ans$foresttype_rast , poly = aoi_sf , title = &quot;FIA forest type group&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.8) + # harrypotter::scale_fill_hp_d(option = &quot;lunalovegood&quot;, alpha = 0.8) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( legend.text = ggplot2::element_text(size = 7, angle = 0) ) distribution by forest type foresttype_sum_fn(crowns = cloud2trees_ans$crowns_sf, aoi = aoi_sf, unit = aoi_sf$study_site_lab[1]) Table 6.3: Count of trees by FIA Forest Type Group . # trees % trees Cedar Bridge (NJ) Loblolly / shortleaf pine group 69,066 98.9% Oak / hickory group 461 0.7% Oak / pine group 338 0.5% 6.2.3.2 DTM plt_rast_poly_fn( rast = cloud2trees_ans$dtm_rast , poly = aoi_sf , title = &quot;DTM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + harrypotter::scale_fill_hp( option = &quot;mischief&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 6.2.3.3 CHM plot the CHM and we’ll also add the extracted trees in gray this is a large area so we’re going to make the raster more coarse and sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.3) plt_rast_poly_fn( rast = cloud2trees_ans$chm_rast %&gt;% terra::aggregate(fact = 2, cores = lasR::half_cores()) , poly = aoi_sf , title = &quot;CHM (m)&quot; , crop = T , buff = 22 , col = &quot;navy&quot; ) + ggplot2::scale_fill_viridis_c( option = &quot;plasma&quot;, alpha = 0.9, labels = scales::comma_format(accuracy=1), breaks = scales::breaks_extended(n=6) ) + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.1) %&gt;% sf::st_intersection( aoi_sf %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) , fill = NA, color = &quot;gray33&quot;, lwd = 0.5 ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) 6.2.3.4 Imagery let’s check the tree extraction results (gray) on satellite imagery with a collection date that may not coincide with the point cloud collection date this is a large area so we’re going to zoom way in on the image and sample from the tree list # add crowns plt_aoi_basemap + ggplot2::geom_sf( data = crowns_temp %&gt;% # cloud2trees_ans$crowns_sf %&gt;% # dplyr::slice_sample(prop = 0.6) %&gt;% sf::st_intersection( aoi_sf %&gt;% # sf::st_centroid() %&gt;% sf::st_buffer(100, endCapStyle = &quot;SQUARE&quot;) %&gt;% sf::st_transform(sf::st_crs(cloud2trees_ans$crowns_sf)) ) %&gt;% sf::st_transform(4326) , fill = NA, color = &quot;gray77&quot;, lwd = 0.1 , inherit.aes = F ) + ggplot2::labs(title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;)) + ggplot2::theme( plot.title = ggplot2::element_text(size = 12, hjust = 0, margin = ggplot2::margin(0,3,3,0)) ) 6.2.3.5 Tree Attributes Spatial this is a large area so we’re going to sample from the tree list crowns_temp &lt;- cloud2trees_ans$crowns_sf %&gt;% dplyr::slice_sample(prop = 0.6) plt_df_temp &lt;- dplyr::tibble( fill_var = c(&quot;tree_height_m&quot;, &quot;dbh_cm&quot;, &quot;tree_cbh_m&quot;, &quot;max_crown_diam_height_m&quot;, &quot;landfire_crown_biomass_kg&quot;) , palette = c(&quot;Blues&quot;, &quot;Oranges&quot;, &quot;Greens&quot;, &quot;Purples&quot;, &quot;Reds&quot;) , title = c(&quot;Height (m)&quot;, &quot;DBH (cm)&quot;, &quot;CBH (m)&quot;, &quot;HMD (m)&quot;, &quot;Crown\\nbiomass (kg)&quot;) ) plts_temp &lt;- 1:nrow(plt_df_temp) %&gt;% purrr::map( \\(x) plt_crown_attr_fn( crowns = crowns_temp , aoi = aoi_sf , lwd = 0.6 , fill_var = plt_df_temp$fill_var[x] , palette = plt_df_temp$palette[x] , title = plt_df_temp$title[x] ) ) # combine with patchwork patchwork::wrap_plots(plts_temp, ncol = 2) + patchwork::plot_annotation( title = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;) # , subtitle = &quot;huh&quot; # , caption = &quot;hey&quot; , theme = ggplot2::theme( plot.title = element_text(hjust = 0.5, margin = ggplot2::margin(0,0,3,0)) ) ) 6.2.3.6 Tree Attributes Summary Stats stats_sum_fn( crowns = cloud2trees_ans$crowns_sf %&gt;% ## !!!!!!!!!!!!!!!!!!!!!!!! cruz_tree_kg_per_m3 empty here dplyr::mutate(cruz_tree_kg_per_m3 = as.numeric(NA)) , aoi = aoi_sf , unit = paste0(aoi_sf$study_site_lab, &quot; - UAS Lidar&quot;) ) Table 6.4: Summary statistics for selected metrics Unit Name Metric Mean Median Std Dev Range Cedar Bridge (NJ) - UAS Lidar(69,865 trees) Height (m) 12.3 12.8 3.7 2.0—33.5 DBH (cm) 22.5 23.1 7.9 3.6—80.5 Crown Base Ht. (m) 4.9 4.9 1.4 1.5—19.5 HMD (m) 6.7 7.0 1.9 0.1—19.6 Cruz CBDkg m-3 NA NA NA NA—NA LANDFIRE CBDkg m-3 0.199 0.189 0.073 0.009—1.466 "],["point-cloud-processing-results.html", "Section 7 Point Cloud Processing Results 7.1 Processing Time 7.2 Silvicultural Metrics", " Section 7 Point Cloud Processing Results 7.1 Processing Time let’s look into the processing time comparison across data sets the cloud2trees::cloud2trees() program automatically tracks processing time for all sections and stores the tracking data in the “point_cloud_processing_delivery” directory in a file called “processed_tracking_data.csv” dir_temp &lt;- &quot;../data&quot; # what processing data? df_temp &lt;- list.files( dir_temp , pattern = &quot;processed_tracking_data.csv&quot; , recursive = T ) %&gt;% dplyr::tibble() %&gt;% setNames(&quot;fpath&quot;) %&gt;% dplyr::mutate( data_desc = stringr::word(fpath, 2, sep = &quot;/&quot;) %&gt;% stringr::str_remove_all(&quot;_processing&quot;) %&gt;% stringr::str_replace_all(&quot;_&quot;,&quot; &quot;) %&gt;% stringr::str_squish() %&gt;% toupper() , data_type = data_desc %&gt;% stringr::str_remove_all(&quot;[0-9]&quot;) %&gt;% stringr::str_squish() , study_site = stringr::word(fpath, sep = &quot;/&quot;) , fpath = file.path(dir_temp, fpath) , fdir = dirname(fpath) ) # read in processing data df_temp &lt;- 1:nrow(df_temp) %&gt;% purrr::map(\\(x) readr::read_csv( df_temp$fpath[x] , show_col_types = F , progress = F ) %&gt;% dplyr::mutate( study_site = df_temp$study_site[x] , data_desc = df_temp$data_desc[x] ) ) %&gt;% dplyr::bind_rows() %&gt;% dplyr::inner_join(df_temp, by = dplyr::join_by(study_site,data_desc)) # add in study bounds study_sites_processing_sf &lt;- study_sites_sf %&gt;% dplyr::select(study_site, study_site_lab) %&gt;% dplyr::inner_join( df_temp , by = &quot;study_site&quot; , relationship = &quot;one-to-many&quot; ) let’s relativize and proportionalize the tracking data # aggregate the total processing time study_sites_processing_sf &lt;- study_sites_processing_sf %&gt;% dplyr::mutate( timer_total_time_mins = timer_cloud2raster_mins + timer_raster2trees_mins + timer_trees_dbh_mins + timer_trees_cbh_mins + timer_trees_type_mins + timer_trees_hmd_mins + timer_trees_biomass_mins + timer_write_data_mins , timer_tree_extraction_mins = timer_cloud2raster_mins + timer_raster2trees_mins , las_area_ha = (las_area_m2/10000) , points_m2 = number_of_points/las_area_m2 # relative , dplyr::across( .cols = tidyselect::starts_with(&quot;timer_&quot;) &amp; tidyselect::ends_with(&quot;_mins&quot;) , .fns = ~ (.x*60)/las_area_ha # sec/ha # , .fns = ~ .x/las_area_ha # min/ha , .names = &quot;{.col}_secperha&quot; # , .names = &quot;{.col}_minperha&quot; ) # proportion , dplyr::across( .cols = c(timer_tree_extraction_mins, timer_trees_dbh_mins, timer_trees_cbh_mins, timer_trees_type_mins, timer_trees_hmd_mins, timer_trees_biomass_mins, timer_write_data_mins) , .fns = ~ .x/timer_total_time_mins , .names = &quot;{.col}_pct&quot; ) ) # study_sites_processing_sf %&gt;% dplyr::glimpse() what is all included in this data? study_sites_processing_sf %&gt;% names() ## [1] &quot;study_site&quot; ## [2] &quot;study_site_lab&quot; ## [3] &quot;number_of_points&quot; ## [4] &quot;las_area_m2&quot; ## [5] &quot;timer_cloud2raster_mins&quot; ## [6] &quot;timer_raster2trees_mins&quot; ## [7] &quot;timer_trees_competition_mins&quot; ## [8] &quot;timer_treels_stem_dbh_mins&quot; ## [9] &quot;timer_trees_dbh_mins&quot; ## [10] &quot;timer_trees_cbh_mins&quot; ## [11] &quot;timer_trees_type_mins&quot; ## [12] &quot;timer_trees_hmd_mins&quot; ## [13] &quot;timer_trees_biomass_mins&quot; ## [14] &quot;timer_write_data_mins&quot; ## [15] &quot;timer_total_time_mins&quot; ## [16] &quot;sttng_input_las_dir&quot; ## [17] &quot;sttng_accuracy_level&quot; ## [18] &quot;sttng_max_ctg_pts&quot; ## [19] &quot;sttng_max_area_m2&quot; ## [20] &quot;sttng_dtm_res_m&quot; ## [21] &quot;sttng_chm_res_m&quot; ## [22] &quot;sttng_min_height&quot; ## [23] &quot;sttng_max_height&quot; ## [24] &quot;sttng_ws&quot; ## [25] &quot;sttng_estimate_tree_dbh&quot; ## [26] &quot;sttng_max_dbh&quot; ## [27] &quot;sttng_dbh_model&quot; ## [28] &quot;sttng_estimate_dbh_from_cloud&quot; ## [29] &quot;sttng_estimate_tree_competition&quot; ## [30] &quot;sttng_competition_buffer_m&quot; ## [31] &quot;sttng_competition_max_search_dist_m&quot; ## [32] &quot;sttng_estimate_tree_type&quot; ## [33] &quot;sttng_type_max_search_dist_m&quot; ## [34] &quot;sttng_estimate_tree_hmd&quot; ## [35] &quot;sttng_hmd_tree_sample_n&quot; ## [36] &quot;sttng_hmd_tree_sample_prop&quot; ## [37] &quot;sttng_hmd_estimate_missing_hmd&quot; ## [38] &quot;sttng_estimate_biomass_method&quot; ## [39] &quot;sttng_biomass_max_crown_kg_per_m3&quot; ## [40] &quot;sttng_estimate_tree_cbh&quot; ## [41] &quot;sttng_cbh_tree_sample_n&quot; ## [42] &quot;sttng_cbh_tree_sample_prop&quot; ## [43] &quot;sttng_cbh_which_cbh&quot; ## [44] &quot;sttng_cbh_estimate_missing_cbh&quot; ## [45] &quot;sttng_cbh_min_vhp_n&quot; ## [46] &quot;sttng_cbh_voxel_grain_size_m&quot; ## [47] &quot;sttng_cbh_dist_btwn_bins_m&quot; ## [48] &quot;sttng_cbh_min_fuel_layer_ht_m&quot; ## [49] &quot;sttng_cbh_lad_pct_gap&quot; ## [50] &quot;sttng_cbh_lad_pct_base&quot; ## [51] &quot;sttng_cbh_num_jump_steps&quot; ## [52] &quot;sttng_cbh_min_lad_pct&quot; ## [53] &quot;sttng_cbh_frst_layer_min_ht_m&quot; ## [54] &quot;data_desc&quot; ## [55] &quot;fpath&quot; ## [56] &quot;data_type&quot; ## [57] &quot;fdir&quot; ## [58] &quot;geometry&quot; ## [59] &quot;timer_tree_extraction_mins&quot; ## [60] &quot;las_area_ha&quot; ## [61] &quot;points_m2&quot; ## [62] &quot;timer_cloud2raster_mins_secperha&quot; ## [63] &quot;timer_raster2trees_mins_secperha&quot; ## [64] &quot;timer_trees_competition_mins_secperha&quot; ## [65] &quot;timer_treels_stem_dbh_mins_secperha&quot; ## [66] &quot;timer_trees_dbh_mins_secperha&quot; ## [67] &quot;timer_trees_cbh_mins_secperha&quot; ## [68] &quot;timer_trees_type_mins_secperha&quot; ## [69] &quot;timer_trees_hmd_mins_secperha&quot; ## [70] &quot;timer_trees_biomass_mins_secperha&quot; ## [71] &quot;timer_write_data_mins_secperha&quot; ## [72] &quot;timer_total_time_mins_secperha&quot; ## [73] &quot;timer_tree_extraction_mins_secperha&quot; ## [74] &quot;timer_tree_extraction_mins_pct&quot; ## [75] &quot;timer_trees_dbh_mins_pct&quot; ## [76] &quot;timer_trees_cbh_mins_pct&quot; ## [77] &quot;timer_trees_type_mins_pct&quot; ## [78] &quot;timer_trees_hmd_mins_pct&quot; ## [79] &quot;timer_trees_biomass_mins_pct&quot; ## [80] &quot;timer_write_data_mins_pct&quot; that’s a lot of tracking data, let’s look at the main timing parameters # format data for plotting/tabling table_temp &lt;- study_sites_processing_sf %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select( study_site, study_site_lab, data_desc, data_type, number_of_points, las_area_ha, points_m2 , c(timer_tree_extraction_mins, timer_trees_dbh_mins, timer_trees_cbh_mins, timer_trees_type_mins, timer_trees_hmd_mins, timer_trees_biomass_mins, timer_write_data_mins , timer_total_time_mins , c(tidyselect::ends_with(&quot;_pct&quot;) &amp; tidyselect::starts_with(&quot;timer_&quot;)) , c(tidyselect::ends_with(&quot;_secperha&quot;) &amp; tidyselect::starts_with(&quot;timer_&quot;)) ) ) %&gt;% tidyr::pivot_longer( cols = -c(study_site, study_site_lab, data_desc, data_type, number_of_points, las_area_ha, points_m2) ) %&gt;% dplyr::mutate( units = stringr::word(name, -1, sep = &quot;_&quot;) , section = name %&gt;% stringr::str_remove_all(&quot;timer_&quot;) %&gt;% stringr::str_remove_all(&quot;_mins&quot;) %&gt;% stringr::str_remove_all(&quot;_pct&quot;) %&gt;% stringr::str_remove_all(&quot;_secperha&quot;) ) %&gt;% dplyr::select(-name) %&gt;% # dplyr::count(units) tidyr::pivot_wider(names_from = units, values_from = value) %&gt;% dplyr::mutate( mins_lab = scales::comma(mins,accuracy = 0.1) , perha_lab = scales::comma(secperha,accuracy = 0.01) , pct_lab = scales::percent(pct,accuracy = 0.1) # site lab , big_lab = stringr::str_c( data_desc , paste0(&quot;area: &quot;, scales::comma(las_area_ha, accuracy = 1, suffix = &quot; ha&quot;)) , paste0(&quot;points: &quot;, scales::comma(number_of_points, accuracy = 0.1, scale = 1/1000000, suffix = &quot;M&quot;)) , paste0(&quot;points m&lt;sup&gt;-2&lt;/sup&gt;: &quot;, scales::comma(points_m2, accuracy = 0.1)) , sep = &quot;&lt;br&gt;&quot; ) , big_lab_ggplot = stringr::str_c( data_desc , paste0(&quot;area: &quot;, scales::comma(las_area_ha, accuracy = 1, suffix = &quot; ha&quot;)) , paste0(&quot;points: &quot;, scales::comma(number_of_points, accuracy = 0.1, scale = 1/1000000, suffix = &quot;M&quot;)) , paste0(&quot;points/m2: &quot;, scales::comma(points_m2, accuracy = 0.1)) , sep = &quot;\\n&quot; ) ) %&gt;% # dplyr::count(section) dplyr::filter(!is.na(mins)) %&gt;% # section lab after filter so factor doesn&#39;t have rand levels dplyr::mutate( section = section %&gt;% stringr::str_replace_all(&quot;_&quot;, &quot; &quot;) %&gt;% stringr::str_remove_all(&quot;time&quot;) %&gt;% stringr::str_replace_all(&quot;dbh&quot;, &quot;DBH&quot;) %&gt;% stringr::str_replace_all(&quot;cbh&quot;, &quot;CBH&quot;) %&gt;% stringr::str_replace_all(&quot;hmd&quot;, &quot;HMD&quot;) %&gt;% stringr::str_squish() %&gt;% forcats::fct_inorder() ) # table it table_temp %&gt;% dplyr::select(study_site_lab,big_lab,section,mins_lab, perha_lab, pct_lab) %&gt;% kableExtra::kbl( caption = &quot;Point cloud processing section run time&quot; , col.names = c( &quot;Site&quot;, &quot;Data&quot; , &quot;Processing section&quot; , &quot;time (minutes)&quot; , &quot;seconds per ha&quot; , &quot;% of total time&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) Table 7.1: Point cloud processing section run time Site Data Processing section time (minutes) seconds per ha % of total time Fort Stewart (GA) ALS 2018area: 900 hapoints: 43.1Mpoints m-2: 4.8 tree extraction 18.7 1.25 10.4% trees DBH 8.7 0.58 4.8% trees CBH 129.2 8.62 71.6% trees type 0.3 0.02 0.2% trees HMD 13.0 0.87 7.2% trees biomass 7.5 0.50 4.2% write data 3.1 0.20 1.7% total 180.6 12.04 NA ALS 2025area: 686 hapoints: 340.2Mpoints m-2: 49.6 tree extraction 134.2 11.74 49.4% trees DBH 11.7 1.03 4.3% trees CBH 109.2 9.55 40.2% trees type 0.2 0.02 0.1% trees HMD 12.0 1.05 4.4% trees biomass 3.1 0.27 1.1% write data 1.2 0.10 0.4% total 271.6 23.76 NA Cedar Bridge (NJ) ALS 2012area: 206 hapoints: 80.3Mpoints m-2: 38.9 tree extraction 23.9 6.96 15.7% trees DBH 5.9 1.71 3.9% trees CBH 115.5 33.59 75.9% trees type 0.1 0.03 0.1% trees HMD 4.8 1.41 3.2% trees biomass 1.1 0.31 0.7% write data 0.8 0.23 0.5% total 152.2 44.24 NA UAS LIDAR 2024area: 292 hapoints: 758.3Mpoints m-2: 259.7 tree extraction 664.8 136.59 70.5% trees DBH 7.8 1.60 0.8% trees CBH 237.3 48.76 25.2% trees type 0.5 0.10 0.1% trees HMD 30.3 6.24 3.2% trees biomass 0.5 0.09 0.0% write data 1.2 0.24 0.1% total 942.3 193.62 NA Salt Cabin (CO) ALS 2021area: 534 hapoints: 35.2Mpoints m-2: 6.6 tree extraction 22.6 2.54 22.1% trees DBH 11.5 1.29 11.2% trees CBH 59.1 6.65 57.8% trees type 1.5 0.17 1.5% trees HMD 3.1 0.35 3.0% trees biomass 2.0 0.22 1.9% write data 2.5 0.28 2.4% total 102.3 11.50 NA UAS SFM 2024area: 28 hapoints: 94.5Mpoints m-2: 339.1 tree extraction 65.4 140.77 79.3% trees DBH 3.7 8.04 4.5% trees CBH 11.8 25.33 14.3% trees type 0.0 0.02 0.0% trees HMD 1.4 3.12 1.8% trees biomass 0.1 0.15 0.1% write data 0.1 0.13 0.1% total 82.5 177.56 NA Sycan Marsh (OR) ALS 2021area: 200 hapoints: 68.0Mpoints m-2: 34.0 tree extraction 17.8 5.35 22.1% trees DBH 4.4 1.31 5.4% trees CBH 55.0 16.50 68.1% trees type 0.0 0.01 0.1% trees HMD 2.3 0.68 2.8% trees biomass 0.9 0.27 1.1% write data 0.3 0.10 0.4% total 80.8 24.23 NA UAS LIDAR 2023area: 53 hapoints: 200.5Mpoints m-2: 378.3 tree extraction 55.9 63.31 63.7% trees DBH 3.1 3.52 3.5% trees CBH 25.1 28.37 28.6% trees type 0.0 0.01 0.0% trees HMD 3.4 3.85 3.9% trees biomass 0.1 0.13 0.1% write data 0.1 0.13 0.1% total 87.8 99.33 NA that’s a lot of numbers to digest, let’s plot the data 7.1.1 Point Cloud Processing Time versus Point Density # per ha time based on point density ggplot2::ggplot( data = table_temp %&gt;% dplyr::filter(section == &quot;total&quot;) , mapping = ggplot2::aes(y = secperha, x = points_m2, color = data_type) ) + ggplot2::geom_point(size = 4, alpha = 0.9) + ggplot2::scale_color_viridis_d(option = &quot;magma&quot;, begin = 0.1, end = 0.5) + ggplot2::labs( x = latex2exp::TeX(&quot;points $m^{-2}$&quot;) , y = latex2exp::TeX(&quot;total seconds $ha^{-1}$&quot;) , color = &quot;&quot; , subtitle = &quot;Point Cloud Processing Time versus Point Density&quot; ) + ggplot2::theme_light() + ggplot2::theme(legend.position = &quot;top&quot;) 7.1.2 Point Cloud Processing Time by Section (%) table_temp %&gt;% dplyr::filter(section != &quot;total&quot;) %&gt;% dplyr::mutate(section = forcats::fct_rev(section)) %&gt;% ggplot2::ggplot( mapping = ggplot2::aes(y = big_lab_ggplot, x = pct, fill = section, group = section) ) + ggplot2::geom_col( width = 0.7, alpha=0.8 ) + ggplot2::geom_text( mapping = ggplot2::aes( label = scales::percent(ifelse(pct&gt;=0.06,pct,NA), accuracy = 1) , fontface = &quot;bold&quot; ) , position = ggplot2::position_stack(vjust = 0.5) , color = &quot;black&quot;, size = 4 ) + ggplot2::facet_wrap(facets = dplyr::vars(study_site_lab), scales = &quot;free_y&quot;) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, begin = 0.1, end = 0.9) + ggplot2::scale_x_continuous(labels = scales::percent_format()) + labs( fill = &quot;&quot;, y = &quot;&quot; , x = &quot;% Point Cloud Total Processing Time&quot; , subtitle = &quot;Point Cloud Processing Time by Section&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_text(size=7) , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_text(size = 8) , axis.text.x = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;) , axis.ticks.x = element_blank() ) + guides( fill = guide_legend(nrow = 3, byrow = T, reverse = T, override.aes = list(alpha = 0.9)) ) 7.1.3 Point Cloud Processing Time by Section (total) table_temp %&gt;% dplyr::filter(section != &quot;total&quot;) %&gt;% dplyr::mutate(section = forcats::fct_rev(section)) %&gt;% ggplot2::ggplot( mapping = ggplot2::aes(y = big_lab_ggplot, x = secperha, fill = section, group = section) ) + geom_text( data = table_temp %&gt;% dplyr::filter(section == &quot;total&quot;) , mapping = ggplot2::aes( y = big_lab_ggplot , x = secperha , label = scales::comma(secperha,accuracy=0.1,suffix = &quot;\\ntotal&quot;) , fontface = &quot;bold&quot; ) , color = &quot;black&quot;, size = 2.3 , hjust = -0.1 ) + ggplot2::geom_col( width = 0.7, alpha=0.8 ) + ggplot2::geom_text( mapping = ggplot2::aes( label = scales::comma(ifelse(secperha&gt;=7.5,secperha,NA), accuracy = 0.1) , fontface = &quot;bold&quot; ) , position = ggplot2::position_stack(vjust = 0.5) , color = &quot;black&quot;, size = 3 ) + ggplot2::facet_wrap(facets = dplyr::vars(study_site_lab), scales = &quot;free_y&quot;) + ggplot2::scale_fill_viridis_d(option = &quot;turbo&quot;, begin = 0.1, end = 0.9) + ggplot2::scale_x_continuous(labels = scales::comma_format(), expand = ggplot2::expansion(mult = c(0,0.1))) + labs( fill = &quot;&quot;, y = &quot;&quot; , x = latex2exp::TeX(&quot;seconds $ha^{-1}$&quot;) , subtitle = &quot;Point Cloud Processing Time by Section&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_text(size=7) , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_text(size = 8) , axis.text.x = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;) , axis.ticks.x = element_blank() ) + guides( fill = guide_legend(nrow = 3, byrow = T, reverse = T, override.aes = list(alpha = 0.9)) ) 7.2 Silvicultural Metrics cloud2trees has some internal functions to identify cloud2trees::cloud2trees() outputs, read the outputs, and crop them to a given AOI, however, these are internal to the program (for now). We can use cloud2trees::cloud2trees_to_lanl_trees() (detailed in the next section) to access this functionality since all we need to do is clip the tree list which we can then aggregate to get common silvicultural metrics 7.2.1 Example here is an example to show the data we’ll get back from the calc_silv_metrics() function we define below # here&#39;s an example # study_sites_processing_sf %&gt;% dplyr::slice(6) %&gt;% dplyr::glimpse() # using the internal fn&#39;s would be: read_trees_flist() %&gt;% clip_tree_list_aoi() ans_temp &lt;- cloud2trees::cloud2trees_to_lanl_trees( input_dir = study_sites_processing_sf$fdir[6] , study_boundary = study_sites_processing_sf %&gt;% dplyr::slice(6) , bbox_aoi = F, buffer = 0 # this is the key to get only trees in our AOI ) # ans_temp %&gt;% names() let’s make a function to summarize the data and create common silvicultural metrics within our stand boundary ################################################################################### # define a function to convert columns in data frame from metric to imperial # see: # https://www.forestnb.com/archives/forest-nb-news/resources/conversions/ # https://www.ars.usda.gov/is/np/agbyproducts/agbyappendix.pdf ################################################################################### calc_imperial_units_fn &lt;- function(df) { df %&gt;% # convert to imperial units dplyr::mutate( dplyr::across( .cols = tidyselect::ends_with(&quot;_cm&quot;) , ~ .x * 0.394 , .names = &quot;{.col}_in&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_m&quot;) , ~ .x * 3.281 , .names = &quot;{.col}_ft&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_m2_per_ha&quot;) , ~ .x * 4.359 , .names = &quot;{.col}_ftac&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_kg_per_ha&quot;) , ~ .x * 0.892178 , .names = &quot;{.col}_lbsac&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_per_ha&quot;) &amp; !tidyselect::ends_with(&quot;_m2_per_ha&quot;) &amp; !tidyselect::ends_with(&quot;_kg_per_ha&quot;) , ~ .x * 0.405 , .names = &quot;{.col}_ac&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_area_ha&quot;) , ~ .x * 2.471 , .names = &quot;{.col}_ac&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;kg_per_m2&quot;) , ~ .x * 0.20482 , .names = &quot;{.col}_lbsft2&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;kg_per_m3&quot;) , ~ .x * 0.0624 , .names = &quot;{.col}_lbsft3&quot; ) , dplyr::across( .cols = tidyselect::ends_with(&quot;_m2&quot;) &amp; !tidyselect::ends_with(&quot;per_m2&quot;) , ~ .x * 10.764 , .names = &quot;{.col}_ft2&quot; ) ) %&gt;% dplyr::rename_with( .fn = function(x){dplyr::case_when( stringr::str_ends(x,&quot;_cm_in&quot;) ~ stringr::str_replace(x,&quot;_cm_in&quot;,&quot;_in&quot;) , stringr::str_ends(x,&quot;_m_ft&quot;) ~ stringr::str_replace(x,&quot;_m_ft&quot;,&quot;_ft&quot;) , stringr::str_ends(x,&quot;_m2_per_ha_ftac&quot;) ~ stringr::str_replace(x,&quot;_m2_per_ha_ftac&quot;,&quot;_ft2_per_ac&quot;) , stringr::str_ends(x,&quot;_kg_per_ha_lbsac&quot;) ~ stringr::str_replace(x,&quot;_kg_per_ha_lbsac&quot;,&quot;_lbs_per_ac&quot;) , stringr::str_ends(x,&quot;_per_ha_ac&quot;) ~ stringr::str_replace(x,&quot;_per_ha_ac&quot;,&quot;_per_ac&quot;) , stringr::str_ends(x,&quot;_area_ha_ac&quot;) ~ stringr::str_replace(x,&quot;_area_ha_ac&quot;,&quot;_area_ac&quot;) , stringr::str_ends(x,&quot;_kg_per_m2_lbsft2&quot;) ~ stringr::str_replace(x,&quot;_kg_per_m2_lbsft2&quot;,&quot;_lbs_per_ft2&quot;) , stringr::str_ends(x,&quot;_kg_per_m3_lbsft3&quot;) ~ stringr::str_replace(x,&quot;_kg_per_m3_lbsft3&quot;,&quot;_lbs_per_ft3&quot;) , stringr::str_ends(x,&quot;_m2_ft2&quot;) ~ stringr::str_replace(x,&quot;_m2_ft2&quot;,&quot;_ft2&quot;) , TRUE ~ x )} ) } ################################################################################### ### stand-level summaries ################################################################################### calc_silv_metrics &lt;- function(tree_list, stand_area_ha = NULL, study_boundary = NULL, calc_imperial_units = F) { # get study area if(!is.null(study_boundary)){ # bounds check if( !inherits(study_boundary,&quot;sf&quot;) &amp;&amp; !inherits(study_boundary,&quot;sfc&quot;) ){stop(&quot;study_boundary must be sf class object&quot;)} if(is.na(sf::st_crs(study_boundary))){stop(&quot;study_boundary does not have a CRS&quot;)} if(inherits(study_boundary,&quot;sf&quot;) &amp;&amp; nrow(study_boundary)!=1){ stop(&quot;study_boundary must only have a single record geometry&quot;) } if(inherits(study_boundary,&quot;sfc&quot;) &amp;&amp; length(study_boundary)!=1){ stop(&quot;study_boundary must only have a single record geometry&quot;) } if( !all( sf::st_is(study_boundary, c(&quot;POLYGON&quot;,&quot;MULTIPOLYGON&quot;)) ) ){ stop(&quot;study_boundary must contain POLYGON type geometry only&quot;) } # area xxstand_area_ha &lt;- study_boundary %&gt;% sf::st_area() %&gt;% as.numeric() %&gt;% `/`(10000) }else if(is.numeric(stand_area_ha)){ xxstand_area_ha &lt;- stand_area_ha[1] }else{ stop(&quot;must provide `stand_area_ha` as numeric or `study_boundary` as sf object&quot;) } if(is.null(xxstand_area_ha) || is.na(xxstand_area_ha) || dplyr::coalesce(xxstand_area_ha,0)&lt;=0){ stop(&quot;could not determine valid stand_area_ha&quot;) } # summarize tree list if(!inherits(tree_list,&quot;data.frame&quot;)){stop(&quot;tree_list must be data.frame class object&quot;)} ###### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! NEED TO PUT IN CHECKS FOR COLUMNS USED # see: cloud2trees::check_df_cols_all_missing() if( !any(stringr::str_detect(names(tree_list), &quot;landfire_crown_biomass_kg&quot;)) ){ tree_list &lt;- tree_list %&gt;% dplyr::mutate(landfire_crown_biomass_kg=as.numeric(NA)) } if( !any(stringr::str_detect(names(tree_list), &quot;cruz_crown_biomass_kg&quot;)) ){ tree_list &lt;- tree_list %&gt;% dplyr::mutate(cruz_crown_biomass_kg=as.numeric(NA)) } if( !any(stringr::str_detect(names(tree_list), &quot;landfire_tree_kg_per_m3&quot;)) ){ tree_list &lt;- tree_list %&gt;% dplyr::mutate(landfire_tree_kg_per_m3=as.numeric(NA)) } if( !any(stringr::str_detect(names(tree_list), &quot;cruz_tree_kg_per_m3&quot;)) ){ tree_list &lt;- tree_list %&gt;% dplyr::mutate(cruz_tree_kg_per_m3=as.numeric(NA)) } # agg agg &lt;- tree_list %&gt;% sf::st_drop_geometry() %&gt;% dplyr::ungroup() %&gt;% dplyr::summarise( n_trees = dplyr::n() , mean_dbh_cm = mean(dbh_cm, na.rm = T) , mean_tree_height_m = mean(tree_height_m, na.rm = T) , mean_tree_cbh_m = mean(tree_cbh_m, na.rm = T) , loreys_height_m = sum(basal_area_m2*tree_height_m, na.rm = T) / sum(basal_area_m2, na.rm = T) , basal_area_m2 = sum(basal_area_m2, na.rm = T) , sum_dbh_cm_sq = sum(dbh_cm^2, na.rm = T) , landfire_crown_biomass_kg = sum(landfire_crown_biomass_kg, na.rm = F) , cruz_crown_biomass_kg = sum(cruz_crown_biomass_kg, na.rm = F) , mean_landfire_tree_kg_per_m3 = mean(landfire_tree_kg_per_m3, na.rm = T) , mean_cruz_tree_kg_per_m3 = mean(cruz_tree_kg_per_m3, na.rm = T) ) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate( stand_area_ha = xxstand_area_ha , trees_per_ha = (n_trees/stand_area_ha) , basal_area_m2_per_ha = (basal_area_m2/stand_area_ha) , qmd_cm = sqrt(sum_dbh_cm_sq/n_trees) , landfire_cfl_kg_per_m2 = landfire_crown_biomass_kg/(stand_area_ha*10000) , cruz_cfl_kg_per_m2 = cruz_crown_biomass_kg/(stand_area_ha*10000) ) %&gt;% dplyr::select(-c(sum_dbh_cm_sq,landfire_crown_biomass_kg,cruz_crown_biomass_kg)) # imperial if(calc_imperial_units){ agg &lt;- calc_imperial_units_fn(agg) } return(agg) } check out the data structure returned by the calc_silv_metrics() function calc_silv_metrics(tree_list = ans_temp$tree_list ,study_boundary = ans_temp$aoi, calc_imperial_units = T) %&gt;% dplyr::glimpse() ## Rows: 1 ## Columns: 27 ## $ n_trees &lt;int&gt; 3571 ## $ mean_dbh_cm &lt;dbl&gt; 16.34315 ## $ mean_tree_height_m &lt;dbl&gt; 9.180978 ## $ mean_tree_cbh_m &lt;dbl&gt; 4.284259 ## $ loreys_height_m &lt;dbl&gt; 14.18135 ## $ basal_area_m2 &lt;dbl&gt; 102.9316 ## $ mean_landfire_tree_kg_per_m3 &lt;dbl&gt; 0.1129203 ## $ mean_cruz_tree_kg_per_m3 &lt;dbl&gt; 0.2209229 ## $ stand_area_ha &lt;dbl&gt; 11.72581 ## $ trees_per_ha &lt;dbl&gt; 304.542 ## $ basal_area_m2_per_ha &lt;dbl&gt; 8.778214 ## $ qmd_cm &lt;dbl&gt; 19.15731 ## $ landfire_cfl_kg_per_m2 &lt;dbl&gt; 0.2577802 ## $ cruz_cfl_kg_per_m2 &lt;dbl&gt; NA ## $ mean_dbh_in &lt;dbl&gt; 6.4392 ## $ qmd_in &lt;dbl&gt; 7.547981 ## $ mean_tree_height_ft &lt;dbl&gt; 30.12279 ## $ mean_tree_cbh_ft &lt;dbl&gt; 14.05665 ## $ loreys_height_ft &lt;dbl&gt; 46.52901 ## $ basal_area_ft2_per_ac &lt;dbl&gt; 38.26423 ## $ trees_per_ac &lt;dbl&gt; 123.3395 ## $ stand_area_ac &lt;dbl&gt; 28.97447 ## $ landfire_cfl_lbs_per_ft2 &lt;dbl&gt; 0.05279854 ## $ cruz_cfl_lbs_per_ft2 &lt;dbl&gt; NA ## $ mean_landfire_tree_lbs_per_ft3 &lt;dbl&gt; 0.007046227 ## $ mean_cruz_tree_lbs_per_ft3 &lt;dbl&gt; 0.01378559 ## $ basal_area_ft2 &lt;dbl&gt; 1107.956 7.2.2 Study Area Summaries let’s calculate the metrics for all study areas # map the process over all data silv_metrics_by_data &lt;- 1:nrow(study_sites_processing_sf) %&gt;% purrr::map(function(x){ # clip the data ans_temp &lt;- cloud2trees::cloud2trees_to_lanl_trees( input_dir = study_sites_processing_sf$fdir[x] , study_boundary = study_sites_processing_sf %&gt;% dplyr::slice(x) , bbox_aoi = F, buffer = 0 # this is the key to get only trees in our AOI ) # silv metrics calc_silv_metrics( tree_list = ans_temp$tree_list , study_boundary = ans_temp$aoi , calc_imperial_units = T ) %&gt;% dplyr::mutate( study_site = study_sites_processing_sf$study_site[x] , study_site_lab = study_sites_processing_sf$study_site_lab[x] , data_desc = study_sites_processing_sf$data_desc[x] , data_type = study_sites_processing_sf$data_type[x] ) }) %&gt;% dplyr::bind_rows() # huh? silv_metrics_by_data %&gt;% dplyr::glimpse() 7.2.2.1 Metric units silv_metrics_by_data %&gt;% dplyr::mutate( nlab = paste0(study_site_lab,&quot;&lt;br&gt;&quot;,scales::comma(stand_area_ha,accuracy=1),&quot; ha&quot;) ) %&gt;% dplyr::relocate(nlab) %&gt;% dplyr::select( nlab , data_desc # different , n_trees , trees_per_ha , mean_tree_height_m , loreys_height_m , mean_dbh_cm , qmd_cm , basal_area_m2_per_ha , mean_landfire_tree_kg_per_m3 , mean_cruz_tree_kg_per_m3 ) %&gt;% dplyr::mutate( dplyr::across(c(n_trees), ~scales::comma(.x,accuracy=1)) , dplyr::across( -c(nlab,data_desc,n_trees,tidyselect::ends_with(&quot;3&quot;)) , ~scales::comma(.x,accuracy=0.1) ) , dplyr::across( tidyselect::ends_with(&quot;3&quot;) , ~scales::comma(.x,accuracy=0.001) ) ) %&gt;% kableExtra::kbl( caption = &quot;Stand summary metrics in metric units&quot; , col.names = c( &quot;site&quot;,&quot;collection&quot; , &quot;trees&quot; , &quot;trees ha&lt;sup&gt;-1&lt;/sup&gt;&quot; , &quot;mean&lt;br&gt;tree ht. (m)&quot; , &quot;Lorey&#39;s&lt;br&gt;tree ht. (m)&quot; , &quot;mean&lt;br&gt;DBH (cm)&quot; , &quot;QMD (cm)&quot; , &quot;BA (m&lt;sup&gt;2&lt;/sup&gt; ha&lt;sup&gt;-1&lt;/sup&gt;)&quot; , &quot;mean&lt;br&gt;CBD (kg m&lt;sup&gt;-3&lt;/sup&gt;)&lt;br&gt;LANDFIRE&quot; , &quot;mean&lt;br&gt;CBD (kg m&lt;sup&gt;-3&lt;/sup&gt;)&lt;br&gt;Cruz&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling(font_size = 10.5) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) Table 7.2: Stand summary metrics in metric units site collection trees trees ha-1 meantree ht. (m) Lorey’stree ht. (m) meanDBH (cm) QMD (cm) BA (m2 ha-1) meanCBD (kg m-3)LANDFIRE meanCBD (kg m-3)Cruz Fort Stewart (GA)306 ha ALS 2018 152,917 499.6 17.5 21.4 22.2 23.9 22.4 0.235 NA ALS 2025 74,205 242.6 19.0 22.8 24.9 26.7 13.6 0.358 NA Cedar Bridge (NJ)147 ha ALS 2012 110,993 754.9 8.9 11.9 15.4 17.0 17.2 0.239 NA UAS LIDAR 2024 69,865 475.2 12.3 14.4 22.5 23.9 21.3 0.199 NA Salt Cabin (CO)12 ha ALS 2021 7,224 615.6 7.7 12.6 12.5 14.7 10.4 0.094 0.292 UAS SFM 2024 3,571 304.5 9.2 14.2 16.3 19.2 8.8 0.113 0.221 Sycan Marsh (OR)16 ha ALS 2021 4,205 257.5 12.7 18.5 24.2 27.9 15.7 0.217 0.420 UAS LIDAR 2023 4,435 271.6 11.5 19.1 22.4 27.3 15.9 0.147 0.299 7.2.2.2 Imperial units silv_metrics_by_data %&gt;% dplyr::mutate( nlab = paste0(study_site_lab,&quot;&lt;br&gt;&quot;,scales::comma(stand_area_ac,accuracy=1),&quot; ac&quot;) ) %&gt;% dplyr::relocate(nlab) %&gt;% dplyr::select( nlab , data_desc # different , n_trees , trees_per_ac , mean_tree_height_ft , loreys_height_ft , mean_dbh_in , qmd_in , basal_area_ft2_per_ac , mean_landfire_tree_lbs_per_ft3 , mean_cruz_tree_lbs_per_ft3 ) %&gt;% dplyr::mutate( dplyr::across(c(n_trees), ~scales::comma(.x,accuracy=1)) , dplyr::across( -c(nlab,data_desc,n_trees,tidyselect::ends_with(&quot;3&quot;)) , ~scales::comma(.x,accuracy=0.1) ) , dplyr::across( tidyselect::ends_with(&quot;3&quot;) , ~scales::comma(.x,accuracy=0.001) ) ) %&gt;% kableExtra::kbl( caption = &quot;Stand summary metrics in imperial units&quot; , col.names = c( &quot;site&quot;,&quot;collection&quot; , &quot;trees&quot; , &quot;trees ac&lt;sup&gt;-1&lt;/sup&gt;&quot; , &quot;mean&lt;br&gt;tree ht. (ft)&quot; , &quot;Lorey&#39;s&lt;br&gt;tree ht. (ft)&quot; , &quot;mean&lt;br&gt;DBH (in)&quot; , &quot;QMD (in)&quot; , &quot;BA (ft&lt;sup&gt;2&lt;/sup&gt; ac&lt;sup&gt;-1&lt;/sup&gt;)&quot; , &quot;mean&lt;br&gt;CBD (lb ft&lt;sup&gt;-3&lt;/sup&gt;)&lt;br&gt;LANDFIRE&quot; , &quot;mean&lt;br&gt;CBD (lb ft&lt;sup&gt;-3&lt;/sup&gt;)&lt;br&gt;Cruz&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling(font_size = 10.5) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) Table 7.3: Stand summary metrics in imperial units site collection trees trees ac-1 meantree ht. (ft) Lorey’stree ht. (ft) meanDBH (in) QMD (in) BA (ft2 ac-1) meanCBD (lb ft-3)LANDFIRE meanCBD (lb ft-3)Cruz Fort Stewart (GA)756 ac ALS 2018 152,917 202.3 57.4 70.2 8.7 9.4 97.5 0.015 NA ALS 2025 74,205 98.2 62.4 74.9 9.8 10.5 59.3 0.022 NA Cedar Bridge (NJ)363 ac ALS 2012 110,993 305.7 29.2 39.1 6.1 6.7 75.0 0.015 NA UAS LIDAR 2024 69,865 192.4 40.3 47.4 8.9 9.4 92.8 0.012 NA Salt Cabin (CO)29 ac ALS 2021 7,224 249.3 25.3 41.3 4.9 5.8 45.4 0.006 0.018 UAS SFM 2024 3,571 123.3 30.1 46.5 6.4 7.5 38.3 0.007 0.014 Sycan Marsh (OR)40 ac ALS 2021 4,205 104.3 41.8 60.5 9.6 11.0 68.5 0.014 0.026 UAS LIDAR 2023 4,435 110.0 37.8 62.7 8.8 10.8 69.5 0.009 0.019 "],["lanl_trees.html", "Section 8 cloud2trees to LANL TREES 8.1 Surface Fuel Quantification 8.2 cloud2trees::cloud2trees_to_lanl_trees() example process 8.3 cloud2trees::cloud2trees_to_lanl_trees() everything", " Section 8 cloud2trees to LANL TREES we format the cloud2trees::cloud2trees() outputs to meet the requirements of the LANL TREES program, which prepares data for fire modeling. This data formatting process is accomplished via cloud2trees::cloud2trees_to_lanl_trees(). The current iteration of this function requires the user to specify surface fuel load parameters, such as litter and herbaceous/grass fuel loads, which are assumed constant across the study area. 8.1 Surface Fuel Quantification let’s pull in surface fuel loading parameters which were determined through a literature review (Gallagher et al. 2017; Ottmar &amp; Andreu 2007) surface_fuels &lt;- readxl::read_excel(&quot;../data/Surface_Fuels.xlsx&quot;) %&gt;% dplyr::mutate(dplyr::across( .cols = tidyselect::contains(&quot;%&quot;) , ~ .x*.01 )) %&gt;% dplyr::rename_with( ~ stringr::str_replace_all(.x,&quot;%&quot;,&quot;pct&quot;) %&gt;% stringr::str_replace_all(&quot;[ .]&quot;, &quot;_&quot;) %&gt;% stringr::str_replace_all(&quot;[^[:alnum:]_]+&quot;, &quot;&quot;) %&gt;% tolower() ) %&gt;% dplyr::rename(study_site=site) %&gt;% dplyr::mutate( study_site = study_site %&gt;% stringr::str_to_title() %&gt;% stringr::str_remove_all(&quot;[ .]&quot;) # these are somewhat based on the literature assuming Fall timing , herbaceous_moisture_pct = dplyr::case_when( is.na(herbaceous_moisture_pct) &amp; study_site == &quot;SycanMarsh&quot; ~ 0.3 , is.na(herbaceous_moisture_pct) &amp; study_site == &quot;FortStewart&quot; ~ 0.95 , is.na(herbaceous_moisture_pct) &amp; study_site == &quot;SaltCabin&quot; ~ 0.3 , is.na(herbaceous_moisture_pct) &amp; study_site == &quot;NewJersey&quot; ~ 0.6 , T ~ herbaceous_moisture_pct ) ) %&gt;% # put on our fancy labels dplyr::inner_join( study_sites_sf %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site, study_site_lab) , by = &quot;study_site&quot; ) # add it to our processing data table study_sites_processing_sf &lt;- study_sites_processing_sf %&gt;% dplyr::left_join(surface_fuels %&gt;% dplyr::select(-study_site_lab),by=&quot;study_site&quot;) # table it surface_fuels %&gt;% tidyr::pivot_longer( cols = -tidyselect::starts_with(&quot;study_site&quot;) ) %&gt;% dplyr::mutate( fuel_type = stringr::word(name,sep=&quot;_&quot;) , name = stringr::str_remove(name, paste0(fuel_type,&quot;_&quot;)) ) %&gt;% tidyr::pivot_wider(names_from = name, values_from = value) %&gt;% dplyr::mutate( dplyr::across( tidyselect::ends_with(&quot;_pct&quot;), ~scales::percent(.x,accuracy=1) ) # , dplyr::across( # dplyr::where(is.numeric), ~scales::comma(.x) # ) ) %&gt;% dplyr::select(-study_site) %&gt;% kableExtra::kbl( caption = &quot;surface fuel loading parameters determined through a literature review&quot; , col.names = c( &quot;site&quot;,&quot;layer&quot; , &quot;Bulk Density&lt;br&gt;(kg m&lt;sup&gt;-3&lt;/sup&gt;)&quot; , &quot;Height (m)&quot; , &quot;Moisture&quot; # , &quot;Surface Area&lt;br&gt;to Volume (m)&quot; , &quot;Sizescale&lt;br&gt;(1/m)&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) Table 8.1: surface fuel loading parameters determined through a literature review site layer Bulk Density(kg m-3) Height (m) Moisture Sizescale(1/m) Sycan Marsh (OR) litter 13.440000 0.0320 9% 0.0004167 herbaceous 0.006500 0.1500 30% 0.0003333 Cedar Bridge (NJ) litter 28.430000 0.0570 9% 0.0004167 herbaceous 0.007530 0.1500 58% 0.0003333 Fort Stewart (GA) litter 19.509000 0.0343 9% 0.0004167 herbaceous 0.100000 25.0000 95% 0.0003333 Salt Cabin (CO) litter 10.320000 0.0180 9% 0.0004167 herbaceous 0.001672 10.0000 30% 0.0003333 8.2 cloud2trees::cloud2trees_to_lanl_trees() example process let’s use Sycan Marsh (OR) to show how easy it is to use cloud2trees::cloud2trees_to_lanl_trees() # just one record with surface fuels for ease processing_info_temp &lt;- study_sites_processing_sf %&gt;% dplyr::filter( study_site==&quot;SycanMarsh&quot; &amp; data_type==&quot;ALS&quot; ) # save a dir path my_dir_temp &lt;- tempdir() # pass info to the fn cloud2trees_to_lanl_trees_ans_temp &lt;- cloud2trees::cloud2trees_to_lanl_trees( input_dir = processing_info_temp$fdir # point_cloud_processing_delivery , study_boundary = processing_info_temp # sf data , bbox_aoi = T # use a bbox , buffer = 20 , topofile = &quot;flat&quot; , cbd_method = &quot;landfire&quot; , output_dir = my_dir_temp , fuel_litter = list( ilitter = 1 , lrho = processing_info_temp$litter_bulk_density_kg_m3 , lmoisture = processing_info_temp$litter_moisture_pct , lss = processing_info_temp$litter_surface_area_to_volume_m , ldepth = processing_info_temp$litter_height_m ) , fuel_grass = list( igrass = 1 , grho = processing_info_temp$herbaceous_bulk_density_kg_m3 , gmoisture = processing_info_temp$herbaceous_moisture_pct , gss = processing_info_temp$herbaceous_surface_area_to_volume_m , gdepth = processing_info_temp$herbaceous_height_m ) ) let’s see what we got cloud2trees_to_lanl_trees_ans_temp %&gt;% names() ## [1] &quot;tree_list&quot; &quot;aoi&quot; &quot;dtm&quot; &quot;domain_path&quot; ## [5] &quot;topofile_path&quot; &quot;fuellist_path&quot; &quot;treelist_path&quot; check out the tree list points that were cropped to our study boundary with a bounding box and a 20m buffer ggplot2::ggplot() + ggplot2::geom_sf( data = cloud2trees_to_lanl_trees_ans_temp$aoi , fill = NA, color = &quot;navy&quot;, lwd = 2 ) + ggplot2::geom_sf( data = cloud2trees_to_lanl_trees_ans_temp$tree_list , mapping = ggplot2::aes(color = tree_height_m) ) + ggplot2::scale_color_distiller(palette = &quot;Blues&quot;, direction = 1) + ggplot2::labs(color = &quot;Height (m)&quot;) + ggplot2::theme_light() + ggplot2::theme(legend.position = &quot;top&quot;) check out the DTM that was set to 2m resolution by default and cropped to our study boundary with a bounding box and a 20m buffer terra::plot(cloud2trees_to_lanl_trees_ans_temp$dtm, main = &quot;DTM (m)&quot;) terra::plot( cloud2trees_to_lanl_trees_ans_temp$aoi %&gt;% sf::st_transform(terra::crs(cloud2trees_to_lanl_trees_ans_temp$dtm)) %&gt;% terra::vect() , add = T, border = &quot;navy&quot;, col = NA , lwd = 11 ) and what are all of these file paths? # the path to the &quot;Lidar_Bounds.geojson&quot; file cloud2trees_to_lanl_trees_ans_temp$domain_path ## [1] &quot;C:\\\\Users\\\\georg\\\\AppData\\\\Local\\\\Temp\\\\Rtmp0UdqAj\\\\lanl_trees_delivery/Lidar_Bounds.geojson&quot; # the path to the &quot;topo.dat&quot; file cloud2trees_to_lanl_trees_ans_temp$topofile_path ## [1] &quot;C:\\\\Users\\\\georg\\\\AppData\\\\Local\\\\Temp\\\\Rtmp0UdqAj\\\\lanl_trees_delivery/topo.dat&quot; # the path to the TREES program &quot;fuellist&quot; file cloud2trees_to_lanl_trees_ans_temp$fuellist_path ## [1] &quot;C:\\\\Users\\\\georg\\\\AppData\\\\Local\\\\Temp\\\\Rtmp0UdqAj\\\\lanl_trees_delivery/fuellist&quot; # the path to the &quot;Cloud2Trees_TreeList.txt&quot; file cloud2trees_to_lanl_trees_ans_temp$treelist_path ## [1] &quot;C:\\\\Users\\\\georg\\\\AppData\\\\Local\\\\Temp\\\\Rtmp0UdqAj\\\\lanl_trees_delivery\\\\Cloud2Trees_TreeList.txt&quot; the cloud2trees::cloud2trees_to_lanl_trees() program made a delivery directory for the astute readers list.files(file.path(my_dir_temp,&quot;lanl_trees_delivery&quot;)) ## [1] &quot;Cloud2Trees_TreeList.txt&quot; &quot;dtm_Clipped.tif&quot; ## [3] &quot;fuellist&quot; &quot;Lidar_Bounds.geojson&quot; ## [5] &quot;topo.dat&quot; let’s look at a few records of the fuellist readLines(cloud2trees_to_lanl_trees_ans_temp$fuellist_path)[1:11] ## [1] &quot;! ----------------------------------&quot; ## [2] &quot;! FIRETEC domain info&quot; ## [3] &quot;! ----------------------------------&quot; ## [4] &quot; nx = 380&quot; ## [5] &quot; ny = 249&quot; ## [6] &quot; nz = 35&quot; ## [7] &quot; dx = 2&quot; ## [8] &quot; dy = 2&quot; ## [9] &quot; dz = 1.0 ! Grid Resolution [m]&quot; ## [10] &quot; aa1 = 1 ! Vertical stretching component [default=1] for Quic-Fire&quot; ## [11] &quot; singlefuel = 1 ! Flag forcing single fuel type instead of multiple fuels&quot; let’s look at the structure of the “Cloud2Trees_TreeList.txt” file which does not include column names readr::read_delim( cloud2trees_to_lanl_trees_ans_temp$treelist_path , col_names = F , progress = F, show_col_types = F ) %&gt;% dplyr::glimpse() ## Rows: 10,392 ## Columns: 10 ## $ X1 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ X2 &lt;dbl&gt; 171.375, 468.125, 533.875, 540.875, 627.875, 657.125, 681.125, 692… ## $ X3 &lt;dbl&gt; 497.875, 497.875, 497.875, 497.875, 497.875, 497.875, 497.875, 497… ## $ X4 &lt;dbl&gt; 7.36, 20.65, 5.56, 9.21, 7.90, 9.11, 10.67, 9.29, 9.03, 17.87, 13.… ## $ X5 &lt;dbl&gt; 3.3592, 2.5000, 2.9067, 3.5722, 3.0063, 3.9859, 2.5000, 3.5516, 2.… ## $ X6 &lt;dbl&gt; 2.1110, 4.2967, 1.0171, 3.3497, 2.2917, 3.0251, 2.9721, 2.8350, 1.… ## $ X7 &lt;dbl&gt; 4.9977, 6.1711, 3.6932, 5.0343, 4.1677, 4.6099, 5.4011, 4.2747, 4.… ## $ X8 &lt;dbl&gt; 0.1241, 0.0774, 0.1464, 0.1464, 0.1581, 0.1334, 0.1416, 0.1416, 0.… ## $ X9 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ X10 &lt;dbl&gt; 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-… 8.3 cloud2trees::cloud2trees_to_lanl_trees() everything as a reminder we processed all of these data study_sites_processing_sf %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site_lab, data_desc, number_of_points, las_area_ha, fdir) %&gt;% dplyr::mutate(dplyr::across(dplyr::where(is.numeric),~scales::comma(.x))) %&gt;% dplyr::rename(cloud2trees_output_dir = fdir) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling(font_size = 12) study_site_lab data_desc number_of_points las_area_ha cloud2trees_output_dir Fort Stewart (GA) ALS 2018 43,073,560 900.0 ../data/FortStewart/als_2018_processing/point_cloud_processing_delivery Fort Stewart (GA) ALS 2025 340,216,525 686.0 ../data/FortStewart/als_2025_processing/point_cloud_processing_delivery Cedar Bridge (NJ) ALS 2012 80,299,066 206.4 ../data/NewJersey/als_2012_processing/point_cloud_processing_delivery Cedar Bridge (NJ) UAS LIDAR 2024 758,267,426 292.0 ../data/NewJersey/uas_lidar_2024_processing/point_cloud_processing_delivery Salt Cabin (CO) ALS 2021 35,217,823 533.7 ../data/SaltCabin/als_2021_processing/point_cloud_processing_delivery Salt Cabin (CO) UAS SFM 2024 94,513,577 27.9 ../data/SaltCabin/uas_sfm_2024_processing/point_cloud_processing_delivery Sycan Marsh (OR) ALS 2021 68,015,885 200.0 ../data/SycanMarsh/als_2021_processing/point_cloud_processing_delivery Sycan Marsh (OR) UAS LIDAR 2023 200,545,096 53.0 ../data/SycanMarsh/uas_lidar_2023_processing/point_cloud_processing_delivery cloud2trees::cloud2trees_to_lanl_trees() all of the cloud2trees::cloud2trees() processed data # dir dir_temp &lt;- file.path(&quot;c:/Users/georg/Downloads/&quot;, &quot;cloud2trees_TREES_data&quot;) if(!dir.exists(dir_temp)){ dir.create(dir_temp) } # start at timer st_temp &lt;- Sys.time() # every data ans_temp &lt;- 1:nrow(study_sites_processing_sf) %&gt;% purrr::map(function(x){ # delivery folder fp &lt;- file.path( dir_temp , paste0( study_sites_processing_sf$study_site[x] , &quot;_&quot;, stringr::str_replace_all(study_sites_processing_sf$data_desc[x],&quot;[ .]&quot;, &quot;_&quot;) ) ) if(!dir.exists(fp)){dir.create(fp)} # cloud2trees::cloud2trees_to_lanl_trees() cloud2trees::cloud2trees_to_lanl_trees( input_dir = study_sites_processing_sf$fdir[x] # point_cloud_processing_delivery , study_boundary = study_sites_processing_sf %&gt;% dplyr::slice(x) # sf data , bbox_aoi = T # use a bbox , buffer = 30 , topofile = &quot;flat&quot; , cbd_method = &quot;landfire&quot; , output_dir = fp , fuel_litter = list( ilitter = 1 , lrho = study_sites_processing_sf$litter_bulk_density_kg_m3[x] , lmoisture = study_sites_processing_sf$litter_moisture_pct[x] , lss = study_sites_processing_sf$litter_surface_area_to_volume_m[x] , ldepth = study_sites_processing_sf$litter_height_m[x] ) , fuel_grass = list( igrass = 1 , grho = study_sites_processing_sf$herbaceous_bulk_density_kg_m3[x] , gmoisture = study_sites_processing_sf$herbaceous_moisture_pct[x] , gss = study_sites_processing_sf$herbaceous_surface_area_to_volume_m[x] , gdepth = study_sites_processing_sf$herbaceous_height_m[x] ) ) }) # end a timer end_temp &lt;- Sys.time() secs_temp &lt;- difftime(end_temp,st_temp,units=&quot;secs&quot;) %&gt;% as.numeric() # set names names(ans_temp) &lt;- paste0( study_sites_processing_sf$study_site , &quot;_&quot;, stringr::str_replace_all(study_sites_processing_sf$data_desc,&quot;[ .]&quot;, &quot;_&quot;) ) to process all of that data took 48.6 seconds (0.81 minutes), not bad, not bad just to confirm we got the data we expected, let’s look at one result using the Sycan Marsh UAS Lidar 2023 data cloud2trees_to_lanl_trees_ans_temp &lt;- ans_temp$SycanMarsh_UAS_LIDAR_2023 cloud2trees_to_lanl_trees_ans_temp %&gt;% names() ## [1] &quot;tree_list&quot; &quot;aoi&quot; &quot;dtm&quot; &quot;domain_path&quot; ## [5] &quot;topofile_path&quot; &quot;fuellist_path&quot; &quot;treelist_path&quot; check out the tree list points that were cropped to our study boundary with a bounding box and a 20m buffer ggplot2::ggplot() + ggplot2::geom_sf( data = cloud2trees_to_lanl_trees_ans_temp$aoi , fill = NA, color = &quot;navy&quot;, lwd = 2 ) + ggplot2::geom_sf( data = cloud2trees_to_lanl_trees_ans_temp$tree_list , mapping = ggplot2::aes(color = tree_height_m) ) + ggplot2::scale_color_distiller(palette = &quot;Blues&quot;, direction = 1) + ggplot2::labs(color = &quot;Height (m)&quot;) + ggplot2::theme_light() + ggplot2::theme(legend.position = &quot;top&quot;) check out the DTM that was set to 2m resolution by default and cropped to our study boundary with a bounding box and a 20m buffer terra::plot(cloud2trees_to_lanl_trees_ans_temp$dtm, main = &quot;DTM (m)&quot;) terra::plot( cloud2trees_to_lanl_trees_ans_temp$aoi %&gt;% sf::st_transform(terra::crs(cloud2trees_to_lanl_trees_ans_temp$dtm)) %&gt;% terra::vect() , add = T, border = &quot;navy&quot;, col = NA , lwd = 11 ) and what are all of these file paths? # the path to the &quot;Lidar_Bounds.geojson&quot; file cloud2trees_to_lanl_trees_ans_temp$domain_path ## [1] &quot;C:\\\\Users\\\\georg\\\\Downloads\\\\cloud2trees_TREES_data\\\\SycanMarsh_UAS_LIDAR_2023\\\\lanl_trees_delivery/Lidar_Bounds.geojson&quot; # the path to the &quot;topo.dat&quot; file cloud2trees_to_lanl_trees_ans_temp$topofile_path ## [1] NA # the path to the TREES program &quot;fuellist&quot; file cloud2trees_to_lanl_trees_ans_temp$fuellist_path ## [1] &quot;C:\\\\Users\\\\georg\\\\Downloads\\\\cloud2trees_TREES_data\\\\SycanMarsh_UAS_LIDAR_2023\\\\lanl_trees_delivery/fuellist&quot; # the path to the &quot;Cloud2Trees_TreeList.txt&quot; file cloud2trees_to_lanl_trees_ans_temp$treelist_path ## [1] &quot;C:\\\\Users\\\\georg\\\\Downloads\\\\cloud2trees_TREES_data\\\\SycanMarsh_UAS_LIDAR_2023\\\\lanl_trees_delivery\\\\Cloud2Trees_TreeList.txt&quot; let’s look at a few records of the fuellist readLines(cloud2trees_to_lanl_trees_ans_temp$fuellist_path)[1:11] ## [1] &quot;! ----------------------------------&quot; ## [2] &quot;! FIRETEC domain info&quot; ## [3] &quot;! ----------------------------------&quot; ## [4] &quot; nx = 390&quot; ## [5] &quot; ny = 259&quot; ## [6] &quot; nz = 36&quot; ## [7] &quot; dx = 2&quot; ## [8] &quot; dy = 2&quot; ## [9] &quot; dz = 1.0 ! Grid Resolution [m]&quot; ## [10] &quot; aa1 = 1 ! Vertical stretching component [default=1] for Quic-Fire&quot; ## [11] &quot; singlefuel = 1 ! Flag forcing single fuel type instead of multiple fuels&quot; let’s look at the structure of the “Cloud2Trees_TreeList.txt” file which does not include column names readr::read_delim( cloud2trees_to_lanl_trees_ans_temp$treelist_path , col_names = F , progress = F, show_col_types = F ) %&gt;% dplyr::glimpse() ## Rows: 8,606 ## Columns: 10 ## $ X1 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ X2 &lt;dbl&gt; 388.875, 558.625, 575.625, 638.875, 699.375, 728.125, 736.375, 740… ## $ X3 &lt;dbl&gt; 517.875, 517.875, 517.875, 517.875, 517.875, 517.875, 517.875, 517… ## $ X4 &lt;dbl&gt; 10.0416, 11.2904, 9.6332, 7.9933, 10.3822, 5.4345, 9.3381, 8.4360,… ## $ X5 &lt;dbl&gt; 5.5000, 4.6646, 2.5000, 4.1667, 4.7420, 1.5000, 4.5000, 3.5000, 5.… ## $ X6 &lt;dbl&gt; 1.4384, 4.1459, 2.0921, 1.9747, 4.2689, 0.8463, 3.1413, 2.4430, 1.… ## $ X7 &lt;dbl&gt; 8.2307, 5.0031, 4.6430, 1.9327, 5.9543, 3.4247, 4.4341, 6.5833, 4.… ## $ X8 &lt;dbl&gt; 0.4253, 0.1613, 0.0972, 0.1065, 0.1192, 0.0676, 0.0676, 0.0676, 0.… ## $ X9 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ X10 &lt;dbl&gt; 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-04, 5e-… "],["d-fuel-structures.html", "Section 9 3D Fuel Structures 9.1 Salt Cabin (CO) - ALS 9.2 Salt Cabin (CO) - UAS-SfM 9.3 Sycan Marsh (OR) - ALS 9.4 Sycan Marsh (OR) - UAS-lidar", " Section 9 3D Fuel Structures This section showcases interactive HTML visualizations of 3D fuel structures derived using the cloud2trees framework to process point cloud data and prepare it for QUIC-Fire fire modeling using the LANL TREES program. We used cloud2trees::cloud2trees() to process raw point cloud data (ALS, UAS-lidar, UAS-SfM) and extract individual tree-level attributes (see sections starting here). These biophysical attributes attached to each tree in the list include geographic coordinates (X, Y), estimated total tree height, and crown area. Beyond these core metrics, cloud2trees was also used to estimate DBH, height to maximum crown diameter (HMD), FIA forest type, canopy base height (CBH), crown bulk density (CBD), and crown biomass. After processing with cloud2trees::cloud2trees(), the cloud2trees::cloud2trees_to_lanl_trees() function was used for formatting these outputs to meet the input specifications of the LANL TREES program (see this section). LANL TREES then translated this tree-level data into the complex 3D fuel arrays required by the QUIC-Fire model. Due to file storage limitations, these detailed visualizations are presented for four datasets from the analysis. 9.1 Salt Cabin (CO) - ALS See processing section for Salt Cabin (CO) - ALS 9.2 Salt Cabin (CO) - UAS-SfM See processing section for Salt Cabin (CO) - UAS-SfM 9.3 Sycan Marsh (OR) - ALS See processing section for Sycan Marsh (OR) - ALS 9.4 Sycan Marsh (OR) - UAS-lidar See processing section for Sycan Marsh (OR) - UAS-lidar "],["lessons-learned.html", "Section 10 Lessons Learned 10.1 Data Processing Challenges/Gaps 10.2 Challenges with these Demos", " Section 10 Lessons Learned 10.1 Data Processing Challenges/Gaps LANDFIRE canopy biomass estimation errors, this could lead to underestimating tree level crown bulk density LANDFIRE estimated bulk density values seem low for three of the sites FIA Forest Type mapping errors Intrinsic fuel properties currently user defined (e.g., fuel moisture, low heat of combustion, surface area to volume, etc.) Requires ocular interpretation to tune trees extraction process, future work could automate starting parameters by forest type Data formatting for fire modeling currently only done by LANL TREES program Surface fuels are currently assigned as either constants or as spatially formatted using the LANL TREES program Most metrics require broader validation across forest types than has been completed Future linkages are possible to model tree parameters from NAIP/Satellite derived canopy height models 10.2 Challenges with these Demos Most data from USGS and Forest Service Data Archive were directly usable while other data sources lacked projection information and documented metadata Only about half of the data was available in public access portals About a third of the data delivered with missing metadata that initially prevented processing Point cloud data that did not use a metric Coordinate Reference System (CRS) requires pre-processing To ensure compatibility with our processing pipeline, point cloud data requires transformation if delivered in State Plane Coordinate Systems (SPCS) or with vertical units expressed in feet Converting these data to a metric Coordinate Reference System (CRS) adds notable overhead to the processing timeline Data provided with boundaries clipped to roughly follow the irregularly-shaped study area (possibly with a buffer), rather than using a strict bounding box during point cloud cropping, prevented the generation of a Digital Terrain Model (DTM) suitable for the LANL TREES program. The LANL TREES program specifically requires a rectangular extent with no missing elevation values for its FORTRAN-formatted ‘topo.dat’ input file. Challenges arise from QUIC-Fire’s reliance on specific projection systems for its wind solver, specifically Universal Transverse Mercator (UTM) and NAD83 Albers Equal Area Conic When raw point cloud data is not collected or generated in either of these projections, the simulation domain must undergo reprojection This transformation can lead to visually odd rotated or cropped domains within the simulation runs A significant temporal discrepancy (3-12 years) exists between datasets collected at each site, which complicates data interpretation and comparison. This time gap acts as a confounding variable when attempting to compare data acquired by different collection systems (e.g., ALS versus UAS-SfM). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
